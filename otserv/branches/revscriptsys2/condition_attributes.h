
// This file has been automatically generated by a script.
// Do not make changes to this file manually, as they will be discarded
// as soon as the project is recompiled

#ifndef CONDITION_ATTRIBUTES_H
#define CONDITION_ATTRIBUTES_H
#include "enum.h"

namespace enums {
	enum ConditionType {
		CONDITION_NONE = 0,
		CONDITION_POISON = 1,
		CONDITION_FIRE = 2,
		CONDITION_ENERGY = 4,
		CONDITION_LIFEDRAIN = 8,
		CONDITION_HASTE = 16,
		CONDITION_PARALYZE = 32,
		CONDITION_OUTFIT = 64,
		CONDITION_INVISIBLE = 128,
		CONDITION_LIGHT = 256,
		CONDITION_MANASHIELD = 512,
		CONDITION_INFIGHT = 1024,
		CONDITION_DRUNK = 2048,
		CONDITION_EXHAUSTED = 4096,
		CONDITION_REGENERATION = 8192,
		CONDITION_SOUL = 16384,
		CONDITION_DROWN = 32768,
		CONDITION_MUTED = 65536,
		CONDITION_ATTRIBUTES = 131072,
		CONDITION_FREEZING = 262144,
		CONDITION_DAZZLED = 524288,
		CONDITION_CURSED = 1048576,
		CONDITION_EXHAUST_COMBAT = 2097152,
		CONDITION_EXHAUST_HEAL = 4194304,
		CONDITION_PACIFIED = 8388608,
		CONDITION_HUNTING = 16777216,
		CONDITION_TRADE_MUTED = 33554432,
	}; // end enum
} // end namespace

typedef BitEnum<enums::ConditionType, 26> ConditionType;

typedef Enum<enums::ConditionType, 26> ConditionType__Base;

//begin enum definitions
	const ConditionType CONDITION_NONE(enums::CONDITION_NONE);
	const ConditionType CONDITION_POISON(enums::CONDITION_POISON);
	const ConditionType CONDITION_FIRE(enums::CONDITION_FIRE);
	const ConditionType CONDITION_ENERGY(enums::CONDITION_ENERGY);
	const ConditionType CONDITION_LIFEDRAIN(enums::CONDITION_LIFEDRAIN);
	const ConditionType CONDITION_HASTE(enums::CONDITION_HASTE);
	const ConditionType CONDITION_PARALYZE(enums::CONDITION_PARALYZE);
	const ConditionType CONDITION_OUTFIT(enums::CONDITION_OUTFIT);
	const ConditionType CONDITION_INVISIBLE(enums::CONDITION_INVISIBLE);
	const ConditionType CONDITION_LIGHT(enums::CONDITION_LIGHT);
	const ConditionType CONDITION_MANASHIELD(enums::CONDITION_MANASHIELD);
	const ConditionType CONDITION_INFIGHT(enums::CONDITION_INFIGHT);
	const ConditionType CONDITION_DRUNK(enums::CONDITION_DRUNK);
	const ConditionType CONDITION_EXHAUSTED(enums::CONDITION_EXHAUSTED);
	const ConditionType CONDITION_REGENERATION(enums::CONDITION_REGENERATION);
	const ConditionType CONDITION_SOUL(enums::CONDITION_SOUL);
	const ConditionType CONDITION_DROWN(enums::CONDITION_DROWN);
	const ConditionType CONDITION_MUTED(enums::CONDITION_MUTED);
	const ConditionType CONDITION_ATTRIBUTES(enums::CONDITION_ATTRIBUTES);
	const ConditionType CONDITION_FREEZING(enums::CONDITION_FREEZING);
	const ConditionType CONDITION_DAZZLED(enums::CONDITION_DAZZLED);
	const ConditionType CONDITION_CURSED(enums::CONDITION_CURSED);
	const ConditionType CONDITION_EXHAUST_COMBAT(enums::CONDITION_EXHAUST_COMBAT);
	const ConditionType CONDITION_EXHAUST_HEAL(enums::CONDITION_EXHAUST_HEAL);
	const ConditionType CONDITION_PACIFIED(enums::CONDITION_PACIFIED);
	const ConditionType CONDITION_HUNTING(enums::CONDITION_HUNTING);
	const ConditionType CONDITION_TRADE_MUTED(enums::CONDITION_TRADE_MUTED);
//end enum definitions

namespace enums {
	enum ConditionEnd {
		CONDITIONEND_CLEANUP,
		CONDITIONEND_DIE,
		ConditionEndICKS,
		CONDITIONEND_ABORT,
	}; // end enum
} // end namespace

typedef Enum<enums::ConditionEnd, enums::CONDITIONEND_ABORT + 1> ConditionEnd;

typedef Enum<enums::ConditionEnd, enums::CONDITIONEND_ABORT + 1> ConditionEnd__Base;

//begin enum definitions
	const ConditionEnd CONDITIONEND_CLEANUP(enums::CONDITIONEND_CLEANUP);
	const ConditionEnd CONDITIONEND_DIE(enums::CONDITIONEND_DIE);
	const ConditionEnd ConditionEndICKS(enums::ConditionEndICKS);
	const ConditionEnd CONDITIONEND_ABORT(enums::CONDITIONEND_ABORT);
//end enum definitions

namespace enums {
	enum ConditionAttribute {
		CONDITIONATTRIBUTE_TYPE = 1,
		CONDITIONATTR_ID = 2,
		CONDITIONATTRIBUTE_TICKS = 3,
		CONDITIONATTR_HEALTHTICKS = 4,
		CONDITIONATTR_HEALTHGAIN = 5,
		CONDITIONATTR_MANATICKS = 6,
		CONDITIONATTR_MANAGAIN = 7,
		CONDITIONATTR_DELAYED = 8,
		CONDITIONATTR_OWNER = 9,
		CONDITIONATTR_INTERVALDATA = 10,
		CONDITIONATTR_SPEEDDELTA = 11,
		CONDITIONATTR_FORMULA_MINA = 12,
		CONDITIONATTR_FORMULA_MINB = 13,
		CONDITIONATTR_FORMULA_MAXA = 14,
		CONDITIONATTR_FORMULA_MAXB = 15,
		CONDITIONATTR_LIGHTCOLOR = 16,
		CONDITIONATTR_LIGHTLEVEL = 17,
		CONDITIONATTR_LIGHTTICKS = 18,
		CONDITIONATTR_LIGHTINTERVAL = 19,
		CONDITIONATTR_SOULTICKS = 20,
		CONDITIONATTR_SOULGAIN = 21,
		CONDITIONATTR_SKILLS = 22,
		CONDITIONATTR_STATS = 23,
		CONDITIONATTR_OUTFIT = 24,
		CONDITIONATTR_PERIODDAMAGE = 25,
		CONDITIONATTR_SKILLSPERCENT = 26,
		CONDITIONATTR_ISBUFF = 27,
		CONDITIONATTR_SUBID = 28,
		CONDITIONATTR_END = 254,
	}; // end enum
} // end namespace

typedef Enum<enums::ConditionAttribute, enums::CONDITIONATTR_END + 1> ConditionAttribute;

typedef Enum<enums::ConditionAttribute, enums::CONDITIONATTR_END + 1> ConditionAttribute__Base;

//begin enum definitions
	const ConditionAttribute CONDITIONATTRIBUTE_TYPE(enums::CONDITIONATTRIBUTE_TYPE);
	const ConditionAttribute CONDITIONATTR_ID(enums::CONDITIONATTR_ID);
	const ConditionAttribute CONDITIONATTRIBUTE_TICKS(enums::CONDITIONATTRIBUTE_TICKS);
	const ConditionAttribute CONDITIONATTR_HEALTHTICKS(enums::CONDITIONATTR_HEALTHTICKS);
	const ConditionAttribute CONDITIONATTR_HEALTHGAIN(enums::CONDITIONATTR_HEALTHGAIN);
	const ConditionAttribute CONDITIONATTR_MANATICKS(enums::CONDITIONATTR_MANATICKS);
	const ConditionAttribute CONDITIONATTR_MANAGAIN(enums::CONDITIONATTR_MANAGAIN);
	const ConditionAttribute CONDITIONATTR_DELAYED(enums::CONDITIONATTR_DELAYED);
	const ConditionAttribute CONDITIONATTR_OWNER(enums::CONDITIONATTR_OWNER);
	const ConditionAttribute CONDITIONATTR_INTERVALDATA(enums::CONDITIONATTR_INTERVALDATA);
	const ConditionAttribute CONDITIONATTR_SPEEDDELTA(enums::CONDITIONATTR_SPEEDDELTA);
	const ConditionAttribute CONDITIONATTR_FORMULA_MINA(enums::CONDITIONATTR_FORMULA_MINA);
	const ConditionAttribute CONDITIONATTR_FORMULA_MINB(enums::CONDITIONATTR_FORMULA_MINB);
	const ConditionAttribute CONDITIONATTR_FORMULA_MAXA(enums::CONDITIONATTR_FORMULA_MAXA);
	const ConditionAttribute CONDITIONATTR_FORMULA_MAXB(enums::CONDITIONATTR_FORMULA_MAXB);
	const ConditionAttribute CONDITIONATTR_LIGHTCOLOR(enums::CONDITIONATTR_LIGHTCOLOR);
	const ConditionAttribute CONDITIONATTR_LIGHTLEVEL(enums::CONDITIONATTR_LIGHTLEVEL);
	const ConditionAttribute CONDITIONATTR_LIGHTTICKS(enums::CONDITIONATTR_LIGHTTICKS);
	const ConditionAttribute CONDITIONATTR_LIGHTINTERVAL(enums::CONDITIONATTR_LIGHTINTERVAL);
	const ConditionAttribute CONDITIONATTR_SOULTICKS(enums::CONDITIONATTR_SOULTICKS);
	const ConditionAttribute CONDITIONATTR_SOULGAIN(enums::CONDITIONATTR_SOULGAIN);
	const ConditionAttribute CONDITIONATTR_SKILLS(enums::CONDITIONATTR_SKILLS);
	const ConditionAttribute CONDITIONATTR_STATS(enums::CONDITIONATTR_STATS);
	const ConditionAttribute CONDITIONATTR_OUTFIT(enums::CONDITIONATTR_OUTFIT);
	const ConditionAttribute CONDITIONATTR_PERIODDAMAGE(enums::CONDITIONATTR_PERIODDAMAGE);
	const ConditionAttribute CONDITIONATTR_SKILLSPERCENT(enums::CONDITIONATTR_SKILLSPERCENT);
	const ConditionAttribute CONDITIONATTR_ISBUFF(enums::CONDITIONATTR_ISBUFF);
	const ConditionAttribute CONDITIONATTR_SUBID(enums::CONDITIONATTR_SUBID);
	const ConditionAttribute CONDITIONATTR_END(enums::CONDITIONATTR_END);
//end enum definitions


#endif
