
// This file has been automatically generated by a script.
// Do not make changes to this file manually, as they will be discarded
// as soon as the project is recompiled

#ifndef CONDITION_ATTRIBUTES_H
#define CONDITION_ATTRIBUTES_H
#include "enum.h"

namespace enums {
	enum ConditionType {
		CONDITION_NONE,
		CONDITION_PHYSICAL,
		CONDITION_ENERGY,
		CONDITION_EARTH,
		CONDITION_FIRE,
		CONDITION_LIFEDRAIN,
		CONDITION_MANADRAIN,
		CONDITION_DROWN,
		CONDITION_ICE,
		CONDITION_HOLY,
		CONDITION_DEATH,
		CONDITION_INFIGHT,
		CONDITION_INVISIBLE,
		CONDITION_MANASHIELD,
		CONDITION_PARALYZE,
		CONDITION_SHAPESHIFT,
		CONDITION_HASTE,
		CONDITION_DRUNK,
		CONDITION_LIGHT,
		CONDITION_REGENERATION,
		CONDITION_SOULREGEN,
		CONDITION_EXHAUST_DAMAGE,
		CONDITION_EXHAUST_HEAL,
		CONDITION_EXHAUST_YELL,
		CONDITION_DISARMED,
		CONDITION_PACIFIED,
		CONDITION_SILENCED,
		CONDITION_MUTED_CHAT,
		CONDITION_MUTED_TRADECHAT,
		CONDITION_HUNTING,
	}; // end enum
} // end namespace

typedef Enum<enums::ConditionType, enums::CONDITION_HUNTING + 1> ConditionType;

typedef Enum<enums::ConditionType, enums::CONDITION_HUNTING + 1> ConditionType__Base;

//begin enum definitions
	const ConditionType CONDITION_NONE(enums::CONDITION_NONE);
	const ConditionType CONDITION_PHYSICAL(enums::CONDITION_PHYSICAL);
	const ConditionType CONDITION_ENERGY(enums::CONDITION_ENERGY);
	const ConditionType CONDITION_EARTH(enums::CONDITION_EARTH);
	const ConditionType CONDITION_FIRE(enums::CONDITION_FIRE);
	const ConditionType CONDITION_LIFEDRAIN(enums::CONDITION_LIFEDRAIN);
	const ConditionType CONDITION_MANADRAIN(enums::CONDITION_MANADRAIN);
	const ConditionType CONDITION_DROWN(enums::CONDITION_DROWN);
	const ConditionType CONDITION_ICE(enums::CONDITION_ICE);
	const ConditionType CONDITION_HOLY(enums::CONDITION_HOLY);
	const ConditionType CONDITION_DEATH(enums::CONDITION_DEATH);
	const ConditionType CONDITION_INFIGHT(enums::CONDITION_INFIGHT);
	const ConditionType CONDITION_INVISIBLE(enums::CONDITION_INVISIBLE);
	const ConditionType CONDITION_MANASHIELD(enums::CONDITION_MANASHIELD);
	const ConditionType CONDITION_PARALYZE(enums::CONDITION_PARALYZE);
	const ConditionType CONDITION_SHAPESHIFT(enums::CONDITION_SHAPESHIFT);
	const ConditionType CONDITION_HASTE(enums::CONDITION_HASTE);
	const ConditionType CONDITION_DRUNK(enums::CONDITION_DRUNK);
	const ConditionType CONDITION_LIGHT(enums::CONDITION_LIGHT);
	const ConditionType CONDITION_REGENERATION(enums::CONDITION_REGENERATION);
	const ConditionType CONDITION_SOULREGEN(enums::CONDITION_SOULREGEN);
	const ConditionType CONDITION_EXHAUST_DAMAGE(enums::CONDITION_EXHAUST_DAMAGE);
	const ConditionType CONDITION_EXHAUST_HEAL(enums::CONDITION_EXHAUST_HEAL);
	const ConditionType CONDITION_EXHAUST_YELL(enums::CONDITION_EXHAUST_YELL);
	const ConditionType CONDITION_DISARMED(enums::CONDITION_DISARMED);
	const ConditionType CONDITION_PACIFIED(enums::CONDITION_PACIFIED);
	const ConditionType CONDITION_SILENCED(enums::CONDITION_SILENCED);
	const ConditionType CONDITION_MUTED_CHAT(enums::CONDITION_MUTED_CHAT);
	const ConditionType CONDITION_MUTED_TRADECHAT(enums::CONDITION_MUTED_TRADECHAT);
	const ConditionType CONDITION_HUNTING(enums::CONDITION_HUNTING);
//end enum definitions

namespace enums {
	enum ConditionAttribute {
		CONDITIONATTRIBUTE_MECHANIC = 1,
		CONDITIONATTRIBUTE_COMBAT = 2,
		CONDITIONATTRIBUTE_SOURCE = 3,
		CONDITIONATTRIBUTE_TICKS = 4,
		CONDITIONATTRIBUTE_ID = 5,
		CONDITIONATTRIBUTE_FLAGS = 6,
		CONDITIONATTRIBUTE_EFFECT_TYPE = 7,
		CONDITIONATTRIBUTE_EFFECT_MODTYPE = 8,
		CONDITIONATTRIBUTE_EFFECT_MODVALUE = 9,
		CONDITIONATTRIBUTE_EFFECT_MODTOTAL = 10,
		CONDITIONATTRIBUTE_EFFECT_MODPERCENT = 11,
		CONDITIONATTRIBUTE_EFFECT_MODTICKS = 12,
		CONDITIONATTRIBUTE_EFFECT_MODPOD = 13,
		CONDITIONATTR_END = 254,
	}; // end enum
} // end namespace

typedef Enum<enums::ConditionAttribute, enums::CONDITIONATTR_END + 1> ConditionAttribute;

typedef Enum<enums::ConditionAttribute, enums::CONDITIONATTR_END + 1> ConditionAttribute__Base;

//begin enum definitions
	const ConditionAttribute CONDITIONATTRIBUTE_MECHANIC(enums::CONDITIONATTRIBUTE_MECHANIC);
	const ConditionAttribute CONDITIONATTRIBUTE_COMBAT(enums::CONDITIONATTRIBUTE_COMBAT);
	const ConditionAttribute CONDITIONATTRIBUTE_SOURCE(enums::CONDITIONATTRIBUTE_SOURCE);
	const ConditionAttribute CONDITIONATTRIBUTE_TICKS(enums::CONDITIONATTRIBUTE_TICKS);
	const ConditionAttribute CONDITIONATTRIBUTE_ID(enums::CONDITIONATTRIBUTE_ID);
	const ConditionAttribute CONDITIONATTRIBUTE_FLAGS(enums::CONDITIONATTRIBUTE_FLAGS);
	const ConditionAttribute CONDITIONATTRIBUTE_EFFECT_TYPE(enums::CONDITIONATTRIBUTE_EFFECT_TYPE);
	const ConditionAttribute CONDITIONATTRIBUTE_EFFECT_MODTYPE(enums::CONDITIONATTRIBUTE_EFFECT_MODTYPE);
	const ConditionAttribute CONDITIONATTRIBUTE_EFFECT_MODVALUE(enums::CONDITIONATTRIBUTE_EFFECT_MODVALUE);
	const ConditionAttribute CONDITIONATTRIBUTE_EFFECT_MODTOTAL(enums::CONDITIONATTRIBUTE_EFFECT_MODTOTAL);
	const ConditionAttribute CONDITIONATTRIBUTE_EFFECT_MODPERCENT(enums::CONDITIONATTRIBUTE_EFFECT_MODPERCENT);
	const ConditionAttribute CONDITIONATTRIBUTE_EFFECT_MODTICKS(enums::CONDITIONATTRIBUTE_EFFECT_MODTICKS);
	const ConditionAttribute CONDITIONATTRIBUTE_EFFECT_MODPOD(enums::CONDITIONATTRIBUTE_EFFECT_MODPOD);
	const ConditionAttribute CONDITIONATTR_END(enums::CONDITIONATTR_END);
//end enum definitions

namespace enums {
	enum MechanicType {
		MECHANIC_NONE = 0,
		MECHANIC_SHAPESHIFT = 1,
		MECHANIC_PACIFIED = 2,
		MECHANIC_DISARMED = 4,
		MECHANIC_SHIELDED = 8,
		MECHANIC_SILENCED = 16,
		MECHANIC_PARALYZED = 32,
		MECHANIC_DRUNK = 64,
		MECHANIC_INVISIBLE = 128,
	}; // end enum
} // end namespace

typedef BitEnum<enums::MechanicType, 8> MechanicType;

typedef Enum<enums::MechanicType, 8> MechanicType__Base;

//begin enum definitions
	const MechanicType MECHANIC_NONE(enums::MECHANIC_NONE);
	const MechanicType MECHANIC_SHAPESHIFT(enums::MECHANIC_SHAPESHIFT);
	const MechanicType MECHANIC_PACIFIED(enums::MECHANIC_PACIFIED);
	const MechanicType MECHANIC_DISARMED(enums::MECHANIC_DISARMED);
	const MechanicType MECHANIC_SHIELDED(enums::MECHANIC_SHIELDED);
	const MechanicType MECHANIC_SILENCED(enums::MECHANIC_SILENCED);
	const MechanicType MECHANIC_PARALYZED(enums::MECHANIC_PARALYZED);
	const MechanicType MECHANIC_DRUNK(enums::MECHANIC_DRUNK);
	const MechanicType MECHANIC_INVISIBLE(enums::MECHANIC_INVISIBLE);
//end enum definitions

namespace enums {
	enum ConditionEnd {
		CONDITIONEND_DURATION,
		CONDITIONEND_DEATH,
		CONDITIONEND_REMOVED,
		CONDITIONEND_UPDATE,
		CONDITIONEND_CLEANUP,
	}; // end enum
} // end namespace

typedef Enum<enums::ConditionEnd, enums::CONDITIONEND_CLEANUP + 1> ConditionEnd;

typedef Enum<enums::ConditionEnd, enums::CONDITIONEND_CLEANUP + 1> ConditionEnd__Base;

//begin enum definitions
	const ConditionEnd CONDITIONEND_DURATION(enums::CONDITIONEND_DURATION);
	const ConditionEnd CONDITIONEND_DEATH(enums::CONDITIONEND_DEATH);
	const ConditionEnd CONDITIONEND_REMOVED(enums::CONDITIONEND_REMOVED);
	const ConditionEnd CONDITIONEND_UPDATE(enums::CONDITIONEND_UPDATE);
	const ConditionEnd CONDITIONEND_CLEANUP(enums::CONDITIONEND_CLEANUP);
//end enum definitions


#endif
