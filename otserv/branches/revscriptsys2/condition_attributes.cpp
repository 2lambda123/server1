
// This file has been automatically generated by a script.
// Do not make changes to this file manually, as they will be discarded
// as soon as the project is recompiled

#include "otpch.h"
#include "condition_attributes.h"

template<> bool ConditionType__Base::initialized = false;
template<> std::string ConditionType__Base::enum_name = "ConditionType";
template<> ConditionType__Base::EnumToString ConditionType__Base::enum_to_string = ConditionType__Base::EnumToString();
template<> ConditionType__Base::StringToEnum ConditionType__Base::string_to_enum = ConditionType__Base::StringToEnum();
template<> ConditionType__Base::StringToEnum ConditionType__Base::lstring_to_enum= ConditionType__Base::StringToEnum();
template<> void ConditionType__Base::initialize()
{
	initAddValue(enums::CONDITION_NONE, "CONDITION_NONE", true);
	initAddValue(enums::CONDITION_POISON, "CONDITION_POISON", true);
	initAddValue(enums::CONDITION_FIRE, "CONDITION_FIRE", true);
	initAddValue(enums::CONDITION_ENERGY, "CONDITION_ENERGY", true);
	initAddValue(enums::CONDITION_LIFEDRAIN, "CONDITION_LIFEDRAIN", true);
	initAddValue(enums::CONDITION_HASTE, "CONDITION_HASTE", true);
	initAddValue(enums::CONDITION_PARALYZE, "CONDITION_PARALYZE", true);
	initAddValue(enums::CONDITION_OUTFIT, "CONDITION_OUTFIT", true);
	initAddValue(enums::CONDITION_INVISIBLE, "CONDITION_INVISIBLE", true);
	initAddValue(enums::CONDITION_LIGHT, "CONDITION_LIGHT", true);
	initAddValue(enums::CONDITION_MANASHIELD, "CONDITION_MANASHIELD", true);
	initAddValue(enums::CONDITION_INFIGHT, "CONDITION_INFIGHT", true);
	initAddValue(enums::CONDITION_DRUNK, "CONDITION_DRUNK", true);
	initAddValue(enums::CONDITION_EXHAUSTED, "CONDITION_EXHAUSTED", true);
	initAddValue(enums::CONDITION_REGENERATION, "CONDITION_REGENERATION", true);
	initAddValue(enums::CONDITION_SOUL, "CONDITION_SOUL", true);
	initAddValue(enums::CONDITION_DROWN, "CONDITION_DROWN", true);
	initAddValue(enums::CONDITION_MUTED, "CONDITION_MUTED", true);
	initAddValue(enums::CONDITION_ATTRIBUTES, "CONDITION_ATTRIBUTES", true);
	initAddValue(enums::CONDITION_FREEZING, "CONDITION_FREEZING", true);
	initAddValue(enums::CONDITION_DAZZLED, "CONDITION_DAZZLED", true);
	initAddValue(enums::CONDITION_CURSED, "CONDITION_CURSED", true);
	initAddValue(enums::CONDITION_EXHAUST_COMBAT, "CONDITION_EXHAUST_COMBAT", true);
	initAddValue(enums::CONDITION_EXHAUST_HEAL, "CONDITION_EXHAUST_HEAL", true);
	initAddValue(enums::CONDITION_PACIFIED, "CONDITION_PACIFIED", true);
	initAddValue(enums::CONDITION_HUNTING, "CONDITION_HUNTING", true);
	initAddValue(enums::CONDITION_TRADE_MUTED, "CONDITION_TRADE_MUTED", true);
}

template<> bool ConditionEnd__Base::initialized = false;
template<> std::string ConditionEnd__Base::enum_name = "ConditionEnd";
template<> ConditionEnd__Base::EnumToString ConditionEnd__Base::enum_to_string = ConditionEnd__Base::EnumToString();
template<> ConditionEnd__Base::StringToEnum ConditionEnd__Base::string_to_enum = ConditionEnd__Base::StringToEnum();
template<> ConditionEnd__Base::StringToEnum ConditionEnd__Base::lstring_to_enum= ConditionEnd__Base::StringToEnum();
template<> void ConditionEnd__Base::initialize()
{
	initAddValue(enums::CONDITIONEND_CLEANUP, "CONDITIONEND_CLEANUP", true);
	initAddValue(enums::CONDITIONEND_DIE, "CONDITIONEND_DIE", true);
	initAddValue(enums::ConditionEndICKS, "ConditionEndICKS", true);
	initAddValue(enums::CONDITIONEND_ABORT, "CONDITIONEND_ABORT", true);
}

template<> bool ConditionAttribute__Base::initialized = false;
template<> std::string ConditionAttribute__Base::enum_name = "ConditionAttribute";
template<> ConditionAttribute__Base::EnumToString ConditionAttribute__Base::enum_to_string = ConditionAttribute__Base::EnumToString();
template<> ConditionAttribute__Base::StringToEnum ConditionAttribute__Base::string_to_enum = ConditionAttribute__Base::StringToEnum();
template<> ConditionAttribute__Base::StringToEnum ConditionAttribute__Base::lstring_to_enum= ConditionAttribute__Base::StringToEnum();
template<> void ConditionAttribute__Base::initialize()
{
	initAddValue(enums::CONDITIONATTRIBUTE_TYPE, "CONDITIONATTRIBUTE_TYPE", true);
	initAddValue(enums::CONDITIONATTR_ID, "CONDITIONATTR_ID", true);
	initAddValue(enums::CONDITIONATTRIBUTE_TICKS, "CONDITIONATTRIBUTE_TICKS", true);
	initAddValue(enums::CONDITIONATTR_HEALTHTICKS, "CONDITIONATTR_HEALTHTICKS", true);
	initAddValue(enums::CONDITIONATTR_HEALTHGAIN, "CONDITIONATTR_HEALTHGAIN", true);
	initAddValue(enums::CONDITIONATTR_MANATICKS, "CONDITIONATTR_MANATICKS", true);
	initAddValue(enums::CONDITIONATTR_MANAGAIN, "CONDITIONATTR_MANAGAIN", true);
	initAddValue(enums::CONDITIONATTR_DELAYED, "CONDITIONATTR_DELAYED", true);
	initAddValue(enums::CONDITIONATTR_OWNER, "CONDITIONATTR_OWNER", true);
	initAddValue(enums::CONDITIONATTR_INTERVALDATA, "CONDITIONATTR_INTERVALDATA", true);
	initAddValue(enums::CONDITIONATTR_SPEEDDELTA, "CONDITIONATTR_SPEEDDELTA", true);
	initAddValue(enums::CONDITIONATTR_FORMULA_MINA, "CONDITIONATTR_FORMULA_MINA", true);
	initAddValue(enums::CONDITIONATTR_FORMULA_MINB, "CONDITIONATTR_FORMULA_MINB", true);
	initAddValue(enums::CONDITIONATTR_FORMULA_MAXA, "CONDITIONATTR_FORMULA_MAXA", true);
	initAddValue(enums::CONDITIONATTR_FORMULA_MAXB, "CONDITIONATTR_FORMULA_MAXB", true);
	initAddValue(enums::CONDITIONATTR_LIGHTCOLOR, "CONDITIONATTR_LIGHTCOLOR", true);
	initAddValue(enums::CONDITIONATTR_LIGHTLEVEL, "CONDITIONATTR_LIGHTLEVEL", true);
	initAddValue(enums::CONDITIONATTR_LIGHTTICKS, "CONDITIONATTR_LIGHTTICKS", true);
	initAddValue(enums::CONDITIONATTR_LIGHTINTERVAL, "CONDITIONATTR_LIGHTINTERVAL", true);
	initAddValue(enums::CONDITIONATTR_SOULTICKS, "CONDITIONATTR_SOULTICKS", true);
	initAddValue(enums::CONDITIONATTR_SOULGAIN, "CONDITIONATTR_SOULGAIN", true);
	initAddValue(enums::CONDITIONATTR_SKILLS, "CONDITIONATTR_SKILLS", true);
	initAddValue(enums::CONDITIONATTR_STATS, "CONDITIONATTR_STATS", true);
	initAddValue(enums::CONDITIONATTR_OUTFIT, "CONDITIONATTR_OUTFIT", true);
	initAddValue(enums::CONDITIONATTR_PERIODDAMAGE, "CONDITIONATTR_PERIODDAMAGE", true);
	initAddValue(enums::CONDITIONATTR_SKILLSPERCENT, "CONDITIONATTR_SKILLSPERCENT", true);
	initAddValue(enums::CONDITIONATTR_ISBUFF, "CONDITIONATTR_ISBUFF", true);
	initAddValue(enums::CONDITIONATTR_SUBID, "CONDITIONATTR_SUBID", true);
	initAddValue(enums::CONDITIONATTR_END, "CONDITIONATTR_END", true);
}

