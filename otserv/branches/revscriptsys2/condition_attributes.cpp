
// This file has been automatically generated by a script.
// Do not make changes to this file manually, as they will be discarded
// as soon as the project is recompiled

#include "otpch.h"
#include "condition_attributes.h"

template<> bool ConditionType__Base::initialized = false;
template<> std::string ConditionType__Base::enum_name = "ConditionType";
template<> ConditionType__Base::EnumToString ConditionType__Base::enum_to_string = ConditionType__Base::EnumToString();
template<> ConditionType__Base::StringToEnum ConditionType__Base::string_to_enum = ConditionType__Base::StringToEnum();
template<> ConditionType__Base::StringToEnum ConditionType__Base::lstring_to_enum= ConditionType__Base::StringToEnum();
template<> void ConditionType__Base::initialize()
{
	initAddValue(enums::CONDITION_NONE, "CONDITION_NONE", true);
	initAddValue(enums::CONDITION_PHYSICAL, "CONDITION_PHYSICAL", true);
	initAddValue(enums::CONDITION_ENERGY, "CONDITION_ENERGY", true);
	initAddValue(enums::CONDITION_EARTH, "CONDITION_EARTH", true);
	initAddValue(enums::CONDITION_FIRE, "CONDITION_FIRE", true);
	initAddValue(enums::CONDITION_LIFEDRAIN, "CONDITION_LIFEDRAIN", true);
	initAddValue(enums::CONDITION_MANADRAIN, "CONDITION_MANADRAIN", true);
	initAddValue(enums::CONDITION_DROWN, "CONDITION_DROWN", true);
	initAddValue(enums::CONDITION_ICE, "CONDITION_ICE", true);
	initAddValue(enums::CONDITION_HOLY, "CONDITION_HOLY", true);
	initAddValue(enums::CONDITION_DEATH, "CONDITION_DEATH", true);
	initAddValue(enums::CONDITION_INFIGHT, "CONDITION_INFIGHT", true);
	initAddValue(enums::CONDITION_INVISIBLE, "CONDITION_INVISIBLE", true);
	initAddValue(enums::CONDITION_MANASHIELD, "CONDITION_MANASHIELD", true);
	initAddValue(enums::CONDITION_PARALYZE, "CONDITION_PARALYZE", true);
	initAddValue(enums::CONDITION_SHAPESHIFT, "CONDITION_SHAPESHIFT", true);
	initAddValue(enums::CONDITION_HASTE, "CONDITION_HASTE", true);
	initAddValue(enums::CONDITION_DRUNK, "CONDITION_DRUNK", true);
	initAddValue(enums::CONDITION_LIGHT, "CONDITION_LIGHT", true);
	initAddValue(enums::CONDITION_REGENERATION, "CONDITION_REGENERATION", true);
	initAddValue(enums::CONDITION_SOULREGEN, "CONDITION_SOULREGEN", true);
	initAddValue(enums::CONDITION_EXHAUST_DAMAGE, "CONDITION_EXHAUST_DAMAGE", true);
	initAddValue(enums::CONDITION_EXHAUST_HEAL, "CONDITION_EXHAUST_HEAL", true);
	initAddValue(enums::CONDITION_EXHAUST_YELL, "CONDITION_EXHAUST_YELL", true);
	initAddValue(enums::CONDITION_DISARMED, "CONDITION_DISARMED", true);
	initAddValue(enums::CONDITION_PACIFIED, "CONDITION_PACIFIED", true);
	initAddValue(enums::CONDITION_SILENCED, "CONDITION_SILENCED", true);
	initAddValue(enums::CONDITION_MUTED_CHAT, "CONDITION_MUTED_CHAT", true);
	initAddValue(enums::CONDITION_MUTED_TRADECHAT, "CONDITION_MUTED_TRADECHAT", true);
	initAddValue(enums::CONDITION_HUNTING, "CONDITION_HUNTING", true);
}

template<> bool ConditionAttribute__Base::initialized = false;
template<> std::string ConditionAttribute__Base::enum_name = "ConditionAttribute";
template<> ConditionAttribute__Base::EnumToString ConditionAttribute__Base::enum_to_string = ConditionAttribute__Base::EnumToString();
template<> ConditionAttribute__Base::StringToEnum ConditionAttribute__Base::string_to_enum = ConditionAttribute__Base::StringToEnum();
template<> ConditionAttribute__Base::StringToEnum ConditionAttribute__Base::lstring_to_enum= ConditionAttribute__Base::StringToEnum();
template<> void ConditionAttribute__Base::initialize()
{
	initAddValue(enums::CONDITIONATTRIBUTE_MECHANIC, "CONDITIONATTRIBUTE_MECHANIC", true);
	initAddValue(enums::CONDITIONATTRIBUTE_COMBAT, "CONDITIONATTRIBUTE_COMBAT", true);
	initAddValue(enums::CONDITIONATTRIBUTE_SOURCE, "CONDITIONATTRIBUTE_SOURCE", true);
	initAddValue(enums::CONDITIONATTRIBUTE_TICKS, "CONDITIONATTRIBUTE_TICKS", true);
	initAddValue(enums::CONDITIONATTRIBUTE_ID, "CONDITIONATTRIBUTE_ID", true);
	initAddValue(enums::CONDITIONATTRIBUTE_FLAGS, "CONDITIONATTRIBUTE_FLAGS", true);
	initAddValue(enums::CONDITIONATTRIBUTE_EFFECT_TYPE, "CONDITIONATTRIBUTE_EFFECT_TYPE", true);
	initAddValue(enums::CONDITIONATTRIBUTE_EFFECT_MODTYPE, "CONDITIONATTRIBUTE_EFFECT_MODTYPE", true);
	initAddValue(enums::CONDITIONATTRIBUTE_EFFECT_MODVALUE, "CONDITIONATTRIBUTE_EFFECT_MODVALUE", true);
	initAddValue(enums::CONDITIONATTRIBUTE_EFFECT_MODTOTAL, "CONDITIONATTRIBUTE_EFFECT_MODTOTAL", true);
	initAddValue(enums::CONDITIONATTRIBUTE_EFFECT_MODPERCENT, "CONDITIONATTRIBUTE_EFFECT_MODPERCENT", true);
	initAddValue(enums::CONDITIONATTRIBUTE_EFFECT_MODTICKS, "CONDITIONATTRIBUTE_EFFECT_MODTICKS", true);
	initAddValue(enums::CONDITIONATTRIBUTE_EFFECT_MODPOD, "CONDITIONATTRIBUTE_EFFECT_MODPOD", true);
	initAddValue(enums::CONDITIONATTR_END, "CONDITIONATTR_END", true);
}

template<> bool MechanicType__Base::initialized = false;
template<> std::string MechanicType__Base::enum_name = "MechanicType";
template<> MechanicType__Base::EnumToString MechanicType__Base::enum_to_string = MechanicType__Base::EnumToString();
template<> MechanicType__Base::StringToEnum MechanicType__Base::string_to_enum = MechanicType__Base::StringToEnum();
template<> MechanicType__Base::StringToEnum MechanicType__Base::lstring_to_enum= MechanicType__Base::StringToEnum();
template<> void MechanicType__Base::initialize()
{
	initAddValue(enums::MECHANIC_NONE, "MECHANIC_NONE", true);
	initAddValue(enums::MECHANIC_SHAPESHIFT, "MECHANIC_SHAPESHIFT", true);
	initAddValue(enums::MECHANIC_PACIFIED, "MECHANIC_PACIFIED", true);
	initAddValue(enums::MECHANIC_DISARMED, "MECHANIC_DISARMED", true);
	initAddValue(enums::MECHANIC_SHIELDED, "MECHANIC_SHIELDED", true);
	initAddValue(enums::MECHANIC_SILENCED, "MECHANIC_SILENCED", true);
	initAddValue(enums::MECHANIC_PARALYZED, "MECHANIC_PARALYZED", true);
	initAddValue(enums::MECHANIC_DRUNK, "MECHANIC_DRUNK", true);
	initAddValue(enums::MECHANIC_INVISIBLE, "MECHANIC_INVISIBLE", true);
}

template<> bool ConditionEnd__Base::initialized = false;
template<> std::string ConditionEnd__Base::enum_name = "ConditionEnd";
template<> ConditionEnd__Base::EnumToString ConditionEnd__Base::enum_to_string = ConditionEnd__Base::EnumToString();
template<> ConditionEnd__Base::StringToEnum ConditionEnd__Base::string_to_enum = ConditionEnd__Base::StringToEnum();
template<> ConditionEnd__Base::StringToEnum ConditionEnd__Base::lstring_to_enum= ConditionEnd__Base::StringToEnum();
template<> void ConditionEnd__Base::initialize()
{
	initAddValue(enums::CONDITIONEND_DURATION, "CONDITIONEND_DURATION", true);
	initAddValue(enums::CONDITIONEND_DEATH, "CONDITIONEND_DEATH", true);
	initAddValue(enums::CONDITIONEND_REMOVED, "CONDITIONEND_REMOVED", true);
	initAddValue(enums::CONDITIONEND_UPDATE, "CONDITIONEND_UPDATE", true);
	initAddValue(enums::CONDITIONEND_CLEANUP, "CONDITIONEND_CLEANUP", true);
}

