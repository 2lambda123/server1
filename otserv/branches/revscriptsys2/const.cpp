
// This file has been automatically generated by a script.
// Do not make changes to this file manually, as they will be discarded
// as soon as the project is recompiled

#include "otpch.h"
#include "const.h"

template<> bool ReturnValue__Base::initialized = false;
template<> std::string ReturnValue__Base::enum_name = "ReturnValue";
template<> ReturnValue__Base::EnumToString ReturnValue__Base::enum_to_string = ReturnValue__Base::EnumToString();
template<> ReturnValue__Base::StringToEnum ReturnValue__Base::string_to_enum = ReturnValue__Base::StringToEnum();
template<> ReturnValue__Base::StringToEnum ReturnValue__Base::lstring_to_enum= ReturnValue__Base::StringToEnum();
template<> void ReturnValue__Base::initialize()
{
	initAddValue(enums::RET_NOERROR, "RET_NOERROR", true);
	initAddValue(enums::RET_NOTPOSSIBLE, "RET_NOTPOSSIBLE", true);
	initAddValue(enums::RET_NOTENOUGHROOM, "RET_NOTENOUGHROOM", true);
	initAddValue(enums::RET_PLAYERISPZLOCKED, "RET_PLAYERISPZLOCKED", true);
	initAddValue(enums::RET_PLAYERISNOTINVITED, "RET_PLAYERISNOTINVITED", true);
	initAddValue(enums::RET_CANNOTTHROW, "RET_CANNOTTHROW", true);
	initAddValue(enums::RET_THEREISNOWAY, "RET_THEREISNOWAY", true);
	initAddValue(enums::RET_DESTINATIONOUTOFREACH, "RET_DESTINATIONOUTOFREACH", true);
	initAddValue(enums::RET_CREATUREBLOCK, "RET_CREATUREBLOCK", true);
	initAddValue(enums::RET_NOTMOVEABLE, "RET_NOTMOVEABLE", true);
	initAddValue(enums::RET_DROPTWOHANDEDITEM, "RET_DROPTWOHANDEDITEM", true);
	initAddValue(enums::RET_BOTHHANDSNEEDTOBEFREE, "RET_BOTHHANDSNEEDTOBEFREE", true);
	initAddValue(enums::RET_CANONLYUSEONEWEAPON, "RET_CANONLYUSEONEWEAPON", true);
	initAddValue(enums::RET_NEEDEXCHANGE, "RET_NEEDEXCHANGE", true);
	initAddValue(enums::RET_CANNOTBEDRESSED, "RET_CANNOTBEDRESSED", true);
	initAddValue(enums::RET_PUTTHISOBJECTINYOURHAND, "RET_PUTTHISOBJECTINYOURHAND", true);
	initAddValue(enums::RET_PUTTHISOBJECTINBOTHHANDS, "RET_PUTTHISOBJECTINBOTHHANDS", true);
	initAddValue(enums::RET_TOOFARAWAY, "RET_TOOFARAWAY", true);
	initAddValue(enums::RET_FIRSTGODOWNSTAIRS, "RET_FIRSTGODOWNSTAIRS", true);
	initAddValue(enums::RET_FIRSTGOUPSTAIRS, "RET_FIRSTGOUPSTAIRS", true);
	initAddValue(enums::RET_CONTAINERNOTENOUGHROOM, "RET_CONTAINERNOTENOUGHROOM", true);
	initAddValue(enums::RET_NOTENOUGHCAPACITY, "RET_NOTENOUGHCAPACITY", true);
	initAddValue(enums::RET_CANNOTPICKUP, "RET_CANNOTPICKUP", true);
	initAddValue(enums::RET_THISISIMPOSSIBLE, "RET_THISISIMPOSSIBLE", true);
	initAddValue(enums::RET_DEPOTISFULL, "RET_DEPOTISFULL", true);
	initAddValue(enums::RET_CREATUREDOESNOTEXIST, "RET_CREATUREDOESNOTEXIST", true);
	initAddValue(enums::RET_CANNOTUSETHISOBJECT, "RET_CANNOTUSETHISOBJECT", true);
	initAddValue(enums::RET_PLAYERWITHTHISNAMEISNOTONLINE, "RET_PLAYERWITHTHISNAMEISNOTONLINE", true);
	initAddValue(enums::RET_NOTREQUIREDLEVELTOUSERUNE, "RET_NOTREQUIREDLEVELTOUSERUNE", true);
	initAddValue(enums::RET_YOUAREALREADYTRADING, "RET_YOUAREALREADYTRADING", true);
	initAddValue(enums::RET_THISPLAYERISALREADYTRADING, "RET_THISPLAYERISALREADYTRADING", true);
	initAddValue(enums::RET_YOUMAYNOTLOGOUTDURINGAFIGHT, "RET_YOUMAYNOTLOGOUTDURINGAFIGHT", true);
	initAddValue(enums::RET_DIRECTPLAYERSHOOT, "RET_DIRECTPLAYERSHOOT", true);
	initAddValue(enums::RET_NOTENOUGHLEVEL, "RET_NOTENOUGHLEVEL", true);
	initAddValue(enums::RET_NOTENOUGHMAGICLEVEL, "RET_NOTENOUGHMAGICLEVEL", true);
	initAddValue(enums::RET_NOTENOUGHMANA, "RET_NOTENOUGHMANA", true);
	initAddValue(enums::RET_NOTENOUGHSOUL, "RET_NOTENOUGHSOUL", true);
	initAddValue(enums::RET_YOUAREEXHAUSTED, "RET_YOUAREEXHAUSTED", true);
	initAddValue(enums::RET_PLAYERISNOTREACHABLE, "RET_PLAYERISNOTREACHABLE", true);
	initAddValue(enums::RET_CANONLYUSETHISRUNEONCREATURES, "RET_CANONLYUSETHISRUNEONCREATURES", true);
	initAddValue(enums::RET_ACTIONNOTPERMITTEDINPROTECTIONZONE, "RET_ACTIONNOTPERMITTEDINPROTECTIONZONE", true);
	initAddValue(enums::RET_YOUMAYNOTATTACKTHISPERSON, "RET_YOUMAYNOTATTACKTHISPERSON", true);
	initAddValue(enums::RET_YOUMAYNOTATTACKAPERSONINPROTECTIONZONE, "RET_YOUMAYNOTATTACKAPERSONINPROTECTIONZONE", true);
	initAddValue(enums::RET_YOUMAYNOTATTACKAPERSONWHILEINPROTECTIONZONE, "RET_YOUMAYNOTATTACKAPERSONWHILEINPROTECTIONZONE", true);
	initAddValue(enums::RET_YOUMAYNOTATTACKTHISCREATURE, "RET_YOUMAYNOTATTACKTHISCREATURE", true);
	initAddValue(enums::RET_YOUCANONLYUSEITONCREATURES, "RET_YOUCANONLYUSEITONCREATURES", true);
	initAddValue(enums::RET_CREATUREISNOTREACHABLE, "RET_CREATUREISNOTREACHABLE", true);
	initAddValue(enums::RET_TURNSECUREMODETOATTACKUNMARKEDPLAYERS, "RET_TURNSECUREMODETOATTACKUNMARKEDPLAYERS", true);
	initAddValue(enums::RET_YOUNEEDPREMIUMACCOUNT, "RET_YOUNEEDPREMIUMACCOUNT", true);
	initAddValue(enums::RET_YOUNEEDTOLEARNTHISSPELL, "RET_YOUNEEDTOLEARNTHISSPELL", true);
	initAddValue(enums::RET_YOURVOCATIONCANNOTUSETHISSPELL, "RET_YOURVOCATIONCANNOTUSETHISSPELL", true);
	initAddValue(enums::RET_YOUNEEDAWEAPONTOUSETHISSPELL, "RET_YOUNEEDAWEAPONTOUSETHISSPELL", true);
	initAddValue(enums::RET_PLAYERISPZLOCKEDLEAVEPVPZONE, "RET_PLAYERISPZLOCKEDLEAVEPVPZONE", true);
	initAddValue(enums::RET_PLAYERISPZLOCKEDENTERPVPZONE, "RET_PLAYERISPZLOCKEDENTERPVPZONE", true);
	initAddValue(enums::RET_ACTIONNOTPERMITTEDINANONPVPZONE, "RET_ACTIONNOTPERMITTEDINANONPVPZONE", true);
	initAddValue(enums::RET_YOUCANNOTLOGOUTHERE, "RET_YOUCANNOTLOGOUTHERE", true);
	initAddValue(enums::RET_YOUNEEDAMAGICITEMTOCASTSPELL, "RET_YOUNEEDAMAGICITEMTOCASTSPELL", true);
	initAddValue(enums::RET_CANNOTCONJUREITEMHERE, "RET_CANNOTCONJUREITEMHERE", true);
	initAddValue(enums::RET_YOUNEEDTOSPLITYOURSPEARS, "RET_YOUNEEDTOSPLITYOURSPEARS", true);
	initAddValue(enums::RET_NAMEISTOOAMBIGIOUS, "RET_NAMEISTOOAMBIGIOUS", true);
	initAddValue(enums::RET_CANONLYUSEONESHIELD, "RET_CANONLYUSEONESHIELD", true);
	initAddValue(enums::RET_YOUARENOTTHEOWNER, "RET_YOUARENOTTHEOWNER", true);
	initAddValue(enums::RET_NOTREQUIREDPROFESSION, "RET_NOTREQUIREDPROFESSION", true);
	initAddValue(enums::RET_NOTREQUIREDLEVEL, "RET_NOTREQUIREDLEVEL", true);
	initAddValue(enums::RET_NEEDPREMIUMTOEQUIPITEM, "RET_NEEDPREMIUMTOEQUIPITEM", true);
}

template<> bool MagicEffect__Base::initialized = false;
template<> std::string MagicEffect__Base::enum_name = "MagicEffect";
template<> MagicEffect__Base::EnumToString MagicEffect__Base::enum_to_string = MagicEffect__Base::EnumToString();
template<> MagicEffect__Base::StringToEnum MagicEffect__Base::string_to_enum = MagicEffect__Base::StringToEnum();
template<> MagicEffect__Base::StringToEnum MagicEffect__Base::lstring_to_enum= MagicEffect__Base::StringToEnum();
template<> void MagicEffect__Base::initialize()
{
	initAddValue(enums::MAGIC_EFFECT_BLOOD, "MAGIC_EFFECT_BLOOD", true);
	initAddValue(enums::MAGIC_EFFECT_BLOOD, "redspark", false);
	initAddValue(enums::MAGIC_EFFECT_BLOOD, "blood", false);
	initAddValue(enums::MAGIC_EFFECT_LOSE_ENERGY, "MAGIC_EFFECT_LOSE_ENERGY", true);
	initAddValue(enums::MAGIC_EFFECT_LOSE_ENERGY, "bluebubble", false);
	initAddValue(enums::MAGIC_EFFECT_PUFF, "MAGIC_EFFECT_PUFF", true);
	initAddValue(enums::MAGIC_EFFECT_PUFF, "puff", false);
	initAddValue(enums::MAGIC_EFFECT_PUFF, "poff", false);
	initAddValue(enums::MAGIC_EFFECT_BLOCKHIT, "MAGIC_EFFECT_BLOCKHIT", true);
	initAddValue(enums::MAGIC_EFFECT_BLOCKHIT, "yellowspark", false);
	initAddValue(enums::MAGIC_EFFECT_EXPLOSION_AREA, "MAGIC_EFFECT_EXPLOSION_AREA", true);
	initAddValue(enums::MAGIC_EFFECT_EXPLOSION_AREA, "explosionarea", false);
	initAddValue(enums::MAGIC_EFFECT_EXPLOSION_DAMAGE, "MAGIC_EFFECT_EXPLOSION_DAMAGE", true);
	initAddValue(enums::MAGIC_EFFECT_EXPLOSION_DAMAGE, "explosion", false);
	initAddValue(enums::MAGIC_EFFECT_FIRE_AREA, "MAGIC_EFFECT_FIRE_AREA", true);
	initAddValue(enums::MAGIC_EFFECT_FIRE_AREA, "firearea", false);
	initAddValue(enums::MAGIC_EFFECT_YELLOW_RINGS, "MAGIC_EFFECT_YELLOW_RINGS", true);
	initAddValue(enums::MAGIC_EFFECT_YELLOW_RINGS, "yellowbubble", false);
	initAddValue(enums::MAGIC_EFFECT_POISON_RINGS, "MAGIC_EFFECT_POISON_RINGS", true);
	initAddValue(enums::MAGIC_EFFECT_POISON_RINGS, "greenbubble", false);
	initAddValue(enums::MAGIC_EFFECT_HIT_AREA, "MAGIC_EFFECT_HIT_AREA", true);
	initAddValue(enums::MAGIC_EFFECT_HIT_AREA, "blackspark", false);
	initAddValue(enums::MAGIC_EFFECT_TELEPORT, "MAGIC_EFFECT_TELEPORT", true);
	initAddValue(enums::MAGIC_EFFECT_TELEPORT, "teleport", false);
	initAddValue(enums::MAGIC_EFFECT_ENERGY_DAMAGE, "MAGIC_EFFECT_ENERGY_DAMAGE", true);
	initAddValue(enums::MAGIC_EFFECT_ENERGY_DAMAGE, "energy", false);
	initAddValue(enums::MAGIC_EFFECT_MAGIC_ENERGY, "MAGIC_EFFECT_MAGIC_ENERGY", true);
	initAddValue(enums::MAGIC_EFFECT_MAGIC_ENERGY, "blueshimmer", false);
	initAddValue(enums::MAGIC_EFFECT_MAGIC_BLOOD, "MAGIC_EFFECT_MAGIC_BLOOD", true);
	initAddValue(enums::MAGIC_EFFECT_MAGIC_BLOOD, "redshimmer", false);
	initAddValue(enums::MAGIC_EFFECT_MAGIC_POISON, "MAGIC_EFFECT_MAGIC_POISON", true);
	initAddValue(enums::MAGIC_EFFECT_MAGIC_POISON, "greenshimmer", false);
	initAddValue(enums::MAGIC_EFFECT_HITBY_FIRE, "MAGIC_EFFECT_HITBY_FIRE", true);
	initAddValue(enums::MAGIC_EFFECT_HITBY_FIRE, "fire", false);
	initAddValue(enums::MAGIC_EFFECT_POISON, "MAGIC_EFFECT_POISON", true);
	initAddValue(enums::MAGIC_EFFECT_POISON, "greenspark", false);
	initAddValue(enums::MAGIC_EFFECT_MORT_AREA, "MAGIC_EFFECT_MORT_AREA", true);
	initAddValue(enums::MAGIC_EFFECT_MORT_AREA, "mortarea", false);
	initAddValue(enums::MAGIC_EFFECT_SOUND_GREEN, "MAGIC_EFFECT_SOUND_GREEN", true);
	initAddValue(enums::MAGIC_EFFECT_SOUND_GREEN, "greennote", false);
	initAddValue(enums::MAGIC_EFFECT_SOUND_RED, "MAGIC_EFFECT_SOUND_RED", true);
	initAddValue(enums::MAGIC_EFFECT_SOUND_RED, "rednote", false);
	initAddValue(enums::MAGIC_EFFECT_POISON_AREA, "MAGIC_EFFECT_POISON_AREA", true);
	initAddValue(enums::MAGIC_EFFECT_POISON_AREA, "poison", false);
	initAddValue(enums::MAGIC_EFFECT_SOUND_YELLOW, "MAGIC_EFFECT_SOUND_YELLOW", true);
	initAddValue(enums::MAGIC_EFFECT_SOUND_YELLOW, "yellownote", false);
	initAddValue(enums::MAGIC_EFFECT_SOUND_PURPLE, "MAGIC_EFFECT_SOUND_PURPLE", true);
	initAddValue(enums::MAGIC_EFFECT_SOUND_PURPLE, "purplenote", false);
	initAddValue(enums::MAGIC_EFFECT_SOUND_BLUE, "MAGIC_EFFECT_SOUND_BLUE", true);
	initAddValue(enums::MAGIC_EFFECT_SOUND_BLUE, "bluenote", false);
	initAddValue(enums::MAGIC_EFFECT_SOUND_WHITE, "MAGIC_EFFECT_SOUND_WHITE", true);
	initAddValue(enums::MAGIC_EFFECT_SOUND_WHITE, "whitenote", false);
	initAddValue(enums::MAGIC_EFFECT_BUBBLES, "MAGIC_EFFECT_BUBBLES", true);
	initAddValue(enums::MAGIC_EFFECT_BUBBLES, "bubbles", false);
	initAddValue(enums::MAGIC_EFFECT_CRAPS, "MAGIC_EFFECT_CRAPS", true);
	initAddValue(enums::MAGIC_EFFECT_CRAPS, "dice", false);
	initAddValue(enums::MAGIC_EFFECT_CRAPS, "craps", false);
	initAddValue(enums::MAGIC_EFFECT_GIFT_WRAPS, "MAGIC_EFFECT_GIFT_WRAPS", true);
	initAddValue(enums::MAGIC_EFFECT_GIFT_WRAPS, "giftwraps", false);
	initAddValue(enums::MAGIC_EFFECT_FIREWORK_YELLOW, "MAGIC_EFFECT_FIREWORK_YELLOW", true);
	initAddValue(enums::MAGIC_EFFECT_FIREWORK_YELLOW, "yellowfirework", false);
	initAddValue(enums::MAGIC_EFFECT_FIREWORK_RED, "MAGIC_EFFECT_FIREWORK_RED", true);
	initAddValue(enums::MAGIC_EFFECT_FIREWORK_RED, "redfirework", false);
	initAddValue(enums::MAGIC_EFFECT_FIREWORK_BLUE, "MAGIC_EFFECT_FIREWORK_BLUE", true);
	initAddValue(enums::MAGIC_EFFECT_FIREWORK_BLUE, "bluefirework", false);
	initAddValue(enums::MAGIC_EFFECT_STUN, "MAGIC_EFFECT_STUN", true);
	initAddValue(enums::MAGIC_EFFECT_STUN, "stun", false);
	initAddValue(enums::MAGIC_EFFECT_SLEEP, "MAGIC_EFFECT_SLEEP", true);
	initAddValue(enums::MAGIC_EFFECT_SLEEP, "sleep", false);
	initAddValue(enums::MAGIC_EFFECT_WATERCREATURE, "MAGIC_EFFECT_WATERCREATURE", true);
	initAddValue(enums::MAGIC_EFFECT_WATERCREATURE, "watercreature", false);
	initAddValue(enums::MAGIC_EFFECT_GROUNDSHAKER, "MAGIC_EFFECT_GROUNDSHAKER", true);
	initAddValue(enums::MAGIC_EFFECT_GROUNDSHAKER, "groundshaker", false);
	initAddValue(enums::MAGIC_EFFECT_HEARTS, "MAGIC_EFFECT_HEARTS", true);
	initAddValue(enums::MAGIC_EFFECT_HEARTS, "hearts", false);
	initAddValue(enums::MAGIC_EFFECT_FIREATTACK, "MAGIC_EFFECT_FIREATTACK", true);
	initAddValue(enums::MAGIC_EFFECT_FIREATTACK, "fireattack", false);
	initAddValue(enums::MAGIC_EFFECT_ENERGY_AREA, "MAGIC_EFFECT_ENERGY_AREA", true);
	initAddValue(enums::MAGIC_EFFECT_ENERGY_AREA, "energyarea", false);
	initAddValue(enums::MAGIC_EFFECT_SMALLCLOUDS, "MAGIC_EFFECT_SMALLCLOUDS", true);
	initAddValue(enums::MAGIC_EFFECT_SMALLCLOUDS, "smallclouds", false);
	initAddValue(enums::MAGIC_EFFECT_HOLYDAMAGE, "MAGIC_EFFECT_HOLYDAMAGE", true);
	initAddValue(enums::MAGIC_EFFECT_HOLYDAMAGE, "holydamage", false);
	initAddValue(enums::MAGIC_EFFECT_HOLYDAMAGE, "holy", false);
	initAddValue(enums::MAGIC_EFFECT_BIGCLOUDS, "MAGIC_EFFECT_BIGCLOUDS", true);
	initAddValue(enums::MAGIC_EFFECT_BIGCLOUDS, "bigclouds", false);
	initAddValue(enums::MAGIC_EFFECT_ICEAREA, "MAGIC_EFFECT_ICEAREA", true);
	initAddValue(enums::MAGIC_EFFECT_ICEAREA, "icearea", false);
	initAddValue(enums::MAGIC_EFFECT_ICETORNADO, "MAGIC_EFFECT_ICETORNADO", true);
	initAddValue(enums::MAGIC_EFFECT_ICETORNADO, "icetornado", false);
	initAddValue(enums::MAGIC_EFFECT_ICEATTACK, "MAGIC_EFFECT_ICEATTACK", true);
	initAddValue(enums::MAGIC_EFFECT_ICEATTACK, "iceattack", false);
	initAddValue(enums::MAGIC_EFFECT_STONES, "MAGIC_EFFECT_STONES", true);
	initAddValue(enums::MAGIC_EFFECT_STONES, "stones", false);
	initAddValue(enums::MAGIC_EFFECT_SMALLPLANTS, "MAGIC_EFFECT_SMALLPLANTS", true);
	initAddValue(enums::MAGIC_EFFECT_SMALLPLANTS, "smallplants", false);
	initAddValue(enums::MAGIC_EFFECT_CARNIPHILA, "MAGIC_EFFECT_CARNIPHILA", true);
	initAddValue(enums::MAGIC_EFFECT_CARNIPHILA, "carniphila", false);
	initAddValue(enums::MAGIC_EFFECT_PURPLEENERGY, "MAGIC_EFFECT_PURPLEENERGY", true);
	initAddValue(enums::MAGIC_EFFECT_PURPLEENERGY, "purpleenergy", false);
	initAddValue(enums::MAGIC_EFFECT_YELLOWENERGY, "MAGIC_EFFECT_YELLOWENERGY", true);
	initAddValue(enums::MAGIC_EFFECT_YELLOWENERGY, "yellowenergy", false);
	initAddValue(enums::MAGIC_EFFECT_HOLYAREA, "MAGIC_EFFECT_HOLYAREA", true);
	initAddValue(enums::MAGIC_EFFECT_HOLYAREA, "holyarea", false);
	initAddValue(enums::MAGIC_EFFECT_BIGPLANTS, "MAGIC_EFFECT_BIGPLANTS", true);
	initAddValue(enums::MAGIC_EFFECT_BIGPLANTS, "bigplants", false);
	initAddValue(enums::MAGIC_EFFECT_CAKE, "MAGIC_EFFECT_CAKE", true);
	initAddValue(enums::MAGIC_EFFECT_CAKE, "cake", false);
	initAddValue(enums::MAGIC_EFFECT_GIANTICE, "MAGIC_EFFECT_GIANTICE", true);
	initAddValue(enums::MAGIC_EFFECT_GIANTICE, "giantice", false);
	initAddValue(enums::MAGIC_EFFECT_WATERSPLASH, "MAGIC_EFFECT_WATERSPLASH", true);
	initAddValue(enums::MAGIC_EFFECT_WATERSPLASH, "watersplash", false);
	initAddValue(enums::MAGIC_EFFECT_PLANTATTACK, "MAGIC_EFFECT_PLANTATTACK", true);
	initAddValue(enums::MAGIC_EFFECT_PLANTATTACK, "plantattack", false);
	initAddValue(enums::MAGIC_EFFECT_TUTORIALARROW, "MAGIC_EFFECT_TUTORIALARROW", true);
	initAddValue(enums::MAGIC_EFFECT_TUTORIALARROW, "tutorialarrow", false);
	initAddValue(enums::MAGIC_EFFECT_TUTORIALSQUARE, "MAGIC_EFFECT_TUTORIALSQUARE", true);
	initAddValue(enums::MAGIC_EFFECT_TUTORIALSQUARE, "tutorialsquare", false);
	initAddValue(enums::MAGIC_EFFECT_MIRRORHORIZONTAL, "MAGIC_EFFECT_MIRRORHORIZONTAL", true);
	initAddValue(enums::MAGIC_EFFECT_MIRRORHORIZONTAL, "mirrorhorizontal", false);
	initAddValue(enums::MAGIC_EFFECT_MIRRORVERTICAL, "MAGIC_EFFECT_MIRRORVERTICAL", true);
	initAddValue(enums::MAGIC_EFFECT_MIRRORVERTICAL, "mirrorvertical", false);
	initAddValue(enums::MAGIC_EFFECT_SKULLHORIZONTAL, "MAGIC_EFFECT_SKULLHORIZONTAL", true);
	initAddValue(enums::MAGIC_EFFECT_SKULLHORIZONTAL, "skullhorizontal", false);
	initAddValue(enums::MAGIC_EFFECT_SKULLVERTICAL, "MAGIC_EFFECT_SKULLVERTICAL", true);
	initAddValue(enums::MAGIC_EFFECT_SKULLVERTICAL, "skullvertical", false);
	initAddValue(enums::MAGIC_EFFECT_ASSASSIN, "MAGIC_EFFECT_ASSASSIN", true);
	initAddValue(enums::MAGIC_EFFECT_ASSASSIN, "assassin", false);
	initAddValue(enums::MAGIC_EFFECT_STEPSHORIZONTAL, "MAGIC_EFFECT_STEPSHORIZONTAL", true);
	initAddValue(enums::MAGIC_EFFECT_STEPSHORIZONTAL, "stepshorizontal", false);
	initAddValue(enums::MAGIC_EFFECT_BLOODYSTEPS, "MAGIC_EFFECT_BLOODYSTEPS", true);
	initAddValue(enums::MAGIC_EFFECT_BLOODYSTEPS, "bloodysteps", false);
	initAddValue(enums::MAGIC_EFFECT_STEPSVERTICAL, "MAGIC_EFFECT_STEPSVERTICAL", true);
	initAddValue(enums::MAGIC_EFFECT_STEPSVERTICAL, "stepsvertical", false);
	initAddValue(enums::MAGIC_EFFECT_YALAHARIGHOST, "MAGIC_EFFECT_YALAHARIGHOST", true);
	initAddValue(enums::MAGIC_EFFECT_YALAHARIGHOST, "yalaharighost", false);
	initAddValue(enums::MAGIC_EFFECT_BATS, "MAGIC_EFFECT_BATS", true);
	initAddValue(enums::MAGIC_EFFECT_BATS, "bats", false);
	initAddValue(enums::MAGIC_EFFECT_SMOKE, "MAGIC_EFFECT_SMOKE", true);
	initAddValue(enums::MAGIC_EFFECT_SMOKE, "smoke", false);
	initAddValue(enums::MAGIC_EFFECT_NONE, "MAGIC_EFFECT_NONE", true);
	initAddValue(enums::MAGIC_EFFECT_UNK, "MAGIC_EFFECT_UNK", true);
}

template<> bool ShootEffect__Base::initialized = false;
template<> std::string ShootEffect__Base::enum_name = "ShootEffect";
template<> ShootEffect__Base::EnumToString ShootEffect__Base::enum_to_string = ShootEffect__Base::EnumToString();
template<> ShootEffect__Base::StringToEnum ShootEffect__Base::string_to_enum = ShootEffect__Base::StringToEnum();
template<> ShootEffect__Base::StringToEnum ShootEffect__Base::lstring_to_enum= ShootEffect__Base::StringToEnum();
template<> void ShootEffect__Base::initialize()
{
	initAddValue(enums::SHOOT_EFFECT_SPEAR, "SHOOT_EFFECT_SPEAR", true);
	initAddValue(enums::SHOOT_EFFECT_SPEAR, "spear", false);
	initAddValue(enums::SHOOT_EFFECT_BOLT, "SHOOT_EFFECT_BOLT", true);
	initAddValue(enums::SHOOT_EFFECT_BOLT, "bolt", false);
	initAddValue(enums::SHOOT_EFFECT_ARROW, "SHOOT_EFFECT_ARROW", true);
	initAddValue(enums::SHOOT_EFFECT_ARROW, "arrow", false);
	initAddValue(enums::SHOOT_EFFECT_FIRE, "SHOOT_EFFECT_FIRE", true);
	initAddValue(enums::SHOOT_EFFECT_FIRE, "fire", false);
	initAddValue(enums::SHOOT_EFFECT_ENERGY, "SHOOT_EFFECT_ENERGY", true);
	initAddValue(enums::SHOOT_EFFECT_ENERGY, "energy", false);
	initAddValue(enums::SHOOT_EFFECT_POISONARROW, "SHOOT_EFFECT_POISONARROW", true);
	initAddValue(enums::SHOOT_EFFECT_POISONARROW, "poisonarrow", false);
	initAddValue(enums::SHOOT_EFFECT_BURSTARROW, "SHOOT_EFFECT_BURSTARROW", true);
	initAddValue(enums::SHOOT_EFFECT_BURSTARROW, "burstarrow", false);
	initAddValue(enums::SHOOT_EFFECT_THROWINGSTAR, "SHOOT_EFFECT_THROWINGSTAR", true);
	initAddValue(enums::SHOOT_EFFECT_THROWINGSTAR, "throwingstar", false);
	initAddValue(enums::SHOOT_EFFECT_THROWINGKNIFE, "SHOOT_EFFECT_THROWINGKNIFE", true);
	initAddValue(enums::SHOOT_EFFECT_THROWINGKNIFE, "throwingknife", false);
	initAddValue(enums::SHOOT_EFFECT_SMALLSTONE, "SHOOT_EFFECT_SMALLSTONE", true);
	initAddValue(enums::SHOOT_EFFECT_SMALLSTONE, "smallstone", false);
	initAddValue(enums::SHOOT_EFFECT_DEATH, "SHOOT_EFFECT_DEATH", true);
	initAddValue(enums::SHOOT_EFFECT_DEATH, "death", false);
	initAddValue(enums::SHOOT_EFFECT_LARGEROCK, "SHOOT_EFFECT_LARGEROCK", true);
	initAddValue(enums::SHOOT_EFFECT_LARGEROCK, "largerock", false);
	initAddValue(enums::SHOOT_EFFECT_SNOWBALL, "SHOOT_EFFECT_SNOWBALL", true);
	initAddValue(enums::SHOOT_EFFECT_SNOWBALL, "snowball", false);
	initAddValue(enums::SHOOT_EFFECT_POWERBOLT, "SHOOT_EFFECT_POWERBOLT", true);
	initAddValue(enums::SHOOT_EFFECT_POWERBOLT, "powerbolt", false);
	initAddValue(enums::SHOOT_EFFECT_POISONFIELD, "SHOOT_EFFECT_POISONFIELD", true);
	initAddValue(enums::SHOOT_EFFECT_POISONFIELD, "poison", false);
	initAddValue(enums::SHOOT_EFFECT_INFERNALBOLT, "SHOOT_EFFECT_INFERNALBOLT", true);
	initAddValue(enums::SHOOT_EFFECT_INFERNALBOLT, "infernalbolt", false);
	initAddValue(enums::SHOOT_EFFECT_HUNTINGSPEAR, "SHOOT_EFFECT_HUNTINGSPEAR", true);
	initAddValue(enums::SHOOT_EFFECT_HUNTINGSPEAR, "huntingspear", false);
	initAddValue(enums::SHOOT_EFFECT_ENCHANTEDSPEAR, "SHOOT_EFFECT_ENCHANTEDSPEAR", true);
	initAddValue(enums::SHOOT_EFFECT_ENCHANTEDSPEAR, "enchantedspear", false);
	initAddValue(enums::SHOOT_EFFECT_REDSTAR, "SHOOT_EFFECT_REDSTAR", true);
	initAddValue(enums::SHOOT_EFFECT_REDSTAR, "redstar", false);
	initAddValue(enums::SHOOT_EFFECT_GREENSTAR, "SHOOT_EFFECT_GREENSTAR", true);
	initAddValue(enums::SHOOT_EFFECT_GREENSTAR, "greenstar", false);
	initAddValue(enums::SHOOT_EFFECT_ROYALSPEAR, "SHOOT_EFFECT_ROYALSPEAR", true);
	initAddValue(enums::SHOOT_EFFECT_ROYALSPEAR, "royalspear", false);
	initAddValue(enums::SHOOT_EFFECT_SNIPERARROW, "SHOOT_EFFECT_SNIPERARROW", true);
	initAddValue(enums::SHOOT_EFFECT_SNIPERARROW, "sniperarrow", false);
	initAddValue(enums::SHOOT_EFFECT_ONYXARROW, "SHOOT_EFFECT_ONYXARROW", true);
	initAddValue(enums::SHOOT_EFFECT_ONYXARROW, "onyxarrow", false);
	initAddValue(enums::SHOOT_EFFECT_PIERCINGBOLT, "SHOOT_EFFECT_PIERCINGBOLT", true);
	initAddValue(enums::SHOOT_EFFECT_PIERCINGBOLT, "piercingbolt", false);
	initAddValue(enums::SHOOT_EFFECT_WHIRLWINDSWORD, "SHOOT_EFFECT_WHIRLWINDSWORD", true);
	initAddValue(enums::SHOOT_EFFECT_WHIRLWINDSWORD, "whirlwindsword", false);
	initAddValue(enums::SHOOT_EFFECT_WHIRLWINDAXE, "SHOOT_EFFECT_WHIRLWINDAXE", true);
	initAddValue(enums::SHOOT_EFFECT_WHIRLWINDAXE, "whirlwindaxe", false);
	initAddValue(enums::SHOOT_EFFECT_WHIRLWINDCLUB, "SHOOT_EFFECT_WHIRLWINDCLUB", true);
	initAddValue(enums::SHOOT_EFFECT_WHIRLWINDCLUB, "whirlwindclub", false);
	initAddValue(enums::SHOOT_EFFECT_ETHEREALSPEAR, "SHOOT_EFFECT_ETHEREALSPEAR", true);
	initAddValue(enums::SHOOT_EFFECT_ETHEREALSPEAR, "etherealspear", false);
	initAddValue(enums::SHOOT_EFFECT_ICE, "SHOOT_EFFECT_ICE", true);
	initAddValue(enums::SHOOT_EFFECT_ICE, "ice", false);
	initAddValue(enums::SHOOT_EFFECT_EARTH, "SHOOT_EFFECT_EARTH", true);
	initAddValue(enums::SHOOT_EFFECT_EARTH, "earth", false);
	initAddValue(enums::SHOOT_EFFECT_HOLY, "SHOOT_EFFECT_HOLY", true);
	initAddValue(enums::SHOOT_EFFECT_HOLY, "holy", false);
	initAddValue(enums::SHOOT_EFFECT_SUDDENDEATH, "SHOOT_EFFECT_SUDDENDEATH", true);
	initAddValue(enums::SHOOT_EFFECT_SUDDENDEATH, "suddendeath", false);
	initAddValue(enums::SHOOT_EFFECT_FLASHARROW, "SHOOT_EFFECT_FLASHARROW", true);
	initAddValue(enums::SHOOT_EFFECT_FLASHARROW, "flasharrow", false);
	initAddValue(enums::SHOOT_EFFECT_FLAMINGARROW, "SHOOT_EFFECT_FLAMINGARROW", true);
	initAddValue(enums::SHOOT_EFFECT_FLAMINGARROW, "flamingarrow", false);
	initAddValue(enums::SHOOT_EFFECT_SHIVERARROW, "SHOOT_EFFECT_SHIVERARROW", true);
	initAddValue(enums::SHOOT_EFFECT_SHIVERARROW, "shiverarrow", false);
	initAddValue(enums::SHOOT_EFFECT_ENERGYBALL, "SHOOT_EFFECT_ENERGYBALL", true);
	initAddValue(enums::SHOOT_EFFECT_ENERGYBALL, "energyball", false);
	initAddValue(enums::SHOOT_EFFECT_SMALLICE, "SHOOT_EFFECT_SMALLICE", true);
	initAddValue(enums::SHOOT_EFFECT_SMALLICE, "smallice", false);
	initAddValue(enums::SHOOT_EFFECT_SMALLHOLY, "SHOOT_EFFECT_SMALLHOLY", true);
	initAddValue(enums::SHOOT_EFFECT_SMALLHOLY, "smallholy", false);
	initAddValue(enums::SHOOT_EFFECT_SMALLEARTH, "SHOOT_EFFECT_SMALLEARTH", true);
	initAddValue(enums::SHOOT_EFFECT_SMALLEARTH, "smallearth", false);
	initAddValue(enums::SHOOT_EFFECT_EARTHARROW, "SHOOT_EFFECT_EARTHARROW", true);
	initAddValue(enums::SHOOT_EFFECT_EARTHARROW, "eartharrow", false);
	initAddValue(enums::SHOOT_EFFECT_EXPLOSION, "SHOOT_EFFECT_EXPLOSION", true);
	initAddValue(enums::SHOOT_EFFECT_EXPLOSION, "explosion", false);
	initAddValue(enums::SHOOT_EFFECT_CAKE, "SHOOT_EFFECT_CAKE", true);
	initAddValue(enums::SHOOT_EFFECT_CAKE, "cake", false);
	initAddValue(enums::SHOOT_EFFECT_WEAPONTYPE, "SHOOT_EFFECT_WEAPONTYPE", true);
	initAddValue(enums::SHOOT_EFFECT_NONE, "SHOOT_EFFECT_NONE", true);
	initAddValue(enums::SHOOT_EFFECT_UNK, "SHOOT_EFFECT_UNK", true);
}

template<> bool SpeakClass__Base::initialized = false;
template<> std::string SpeakClass__Base::enum_name = "SpeakClass";
template<> SpeakClass__Base::EnumToString SpeakClass__Base::enum_to_string = SpeakClass__Base::EnumToString();
template<> SpeakClass__Base::StringToEnum SpeakClass__Base::string_to_enum = SpeakClass__Base::StringToEnum();
template<> SpeakClass__Base::StringToEnum SpeakClass__Base::lstring_to_enum= SpeakClass__Base::StringToEnum();
template<> void SpeakClass__Base::initialize()
{
	initAddValue(enums::SPEAK_SAY, "SPEAK_SAY", true);
	initAddValue(enums::SPEAK_WHISPER, "SPEAK_WHISPER", true);
	initAddValue(enums::SPEAK_YELL, "SPEAK_YELL", true);
	initAddValue(enums::SPEAK_PRIVATE_PN, "SPEAK_PRIVATE_PN", true);
	initAddValue(enums::SPEAK_PRIVATE_NP, "SPEAK_PRIVATE_NP", true);
	initAddValue(enums::SPEAK_PRIVATE, "SPEAK_PRIVATE", true);
	initAddValue(enums::SPEAK_CHANNEL_Y, "SPEAK_CHANNEL_Y", true);
	initAddValue(enums::SPEAK_CHANNEL_W, "SPEAK_CHANNEL_W", true);
	initAddValue(enums::SPEAK_RVR_CHANNEL, "SPEAK_RVR_CHANNEL", true);
	initAddValue(enums::SPEAK_RVR_ANSWER, "SPEAK_RVR_ANSWER", true);
	initAddValue(enums::SPEAK_RVR_CONTINUE, "SPEAK_RVR_CONTINUE", true);
	initAddValue(enums::SPEAK_BROADCAST, "SPEAK_BROADCAST", true);
	initAddValue(enums::SPEAK_CHANNEL_R1, "SPEAK_CHANNEL_R1", true);
	initAddValue(enums::SPEAK_PRIVATE_RED, "SPEAK_PRIVATE_RED", true);
	initAddValue(enums::SPEAK_CHANNEL_O, "SPEAK_CHANNEL_O", true);
	initAddValue(enums::SPEAK_CHANNEL_R2, "SPEAK_CHANNEL_R2", true);
	initAddValue(enums::SPEAK_MONSTER_SAY, "SPEAK_MONSTER_SAY", true);
	initAddValue(enums::SPEAK_MONSTER_YELL, "SPEAK_MONSTER_YELL", true);
}

template<> bool MessageClass__Base::initialized = false;
template<> std::string MessageClass__Base::enum_name = "MessageClass";
template<> MessageClass__Base::EnumToString MessageClass__Base::enum_to_string = MessageClass__Base::EnumToString();
template<> MessageClass__Base::StringToEnum MessageClass__Base::string_to_enum = MessageClass__Base::StringToEnum();
template<> MessageClass__Base::StringToEnum MessageClass__Base::lstring_to_enum= MessageClass__Base::StringToEnum();
template<> void MessageClass__Base::initialize()
{
	initAddValue(enums::MSG_CLASS_FIRST, "MSG_CLASS_FIRST", true);
	initAddValue(enums::MSG_STATUS_CONSOLE_RED, "MSG_STATUS_CONSOLE_RED", true);
	initAddValue(enums::MSG_STATUS_CONSOLE_ORANGE2, "MSG_STATUS_CONSOLE_ORANGE2", true);
	initAddValue(enums::MSG_STATUS_CONSOLE_ORANGE, "MSG_STATUS_CONSOLE_ORANGE", true);
	initAddValue(enums::MSG_STATUS_WARNING, "MSG_STATUS_WARNING", true);
	initAddValue(enums::MSG_EVENT_ADVANCE, "MSG_EVENT_ADVANCE", true);
	initAddValue(enums::MSG_EVENT_DEFAULT, "MSG_EVENT_DEFAULT", true);
	initAddValue(enums::MSG_STATUS_DEFAULT, "MSG_STATUS_DEFAULT", true);
	initAddValue(enums::MSG_INFO_DESCR, "MSG_INFO_DESCR", true);
	initAddValue(enums::MSG_STATUS_SMALL, "MSG_STATUS_SMALL", true);
	initAddValue(enums::MSG_STATUS_CONSOLE_BLUE, "MSG_STATUS_CONSOLE_BLUE", true);
	initAddValue(enums::MSG_CLASS_LAST, "MSG_CLASS_LAST", true);
}

template<> bool FluidColor__Base::initialized = false;
template<> std::string FluidColor__Base::enum_name = "FluidColor";
template<> FluidColor__Base::EnumToString FluidColor__Base::enum_to_string = FluidColor__Base::EnumToString();
template<> FluidColor__Base::StringToEnum FluidColor__Base::string_to_enum = FluidColor__Base::StringToEnum();
template<> FluidColor__Base::StringToEnum FluidColor__Base::lstring_to_enum= FluidColor__Base::StringToEnum();
template<> void FluidColor__Base::initialize()
{
	initAddValue(enums::FLUID_EMPTY, "FLUID_EMPTY", true);
	initAddValue(enums::FLUID_BLUE, "FLUID_BLUE", true);
	initAddValue(enums::FLUID_RED, "FLUID_RED", true);
	initAddValue(enums::FLUID_BROWN, "FLUID_BROWN", true);
	initAddValue(enums::FLUID_GREEN, "FLUID_GREEN", true);
	initAddValue(enums::FLUID_YELLOW, "FLUID_YELLOW", true);
	initAddValue(enums::FLUID_WHITE, "FLUID_WHITE", true);
	initAddValue(enums::FLUID_PURPLE, "FLUID_PURPLE", true);
}

template<> bool FluidType__Base::initialized = false;
template<> std::string FluidType__Base::enum_name = "FluidType";
template<> FluidType__Base::EnumToString FluidType__Base::enum_to_string = FluidType__Base::EnumToString();
template<> FluidType__Base::StringToEnum FluidType__Base::string_to_enum = FluidType__Base::StringToEnum();
template<> FluidType__Base::StringToEnum FluidType__Base::lstring_to_enum= FluidType__Base::StringToEnum();
template<> void FluidType__Base::initialize()
{
	initAddValue(enums::FLUID_NONE, "FLUID_NONE", true);
	initAddValue(enums::FLUID_NONE, "none", false);
	initAddValue(enums::FLUID_WATER, "FLUID_WATER", true);
	initAddValue(enums::FLUID_WATER, "water", false);
	initAddValue(enums::FLUID_BLOOD, "FLUID_BLOOD", true);
	initAddValue(enums::FLUID_BLOOD, "blood", false);
	initAddValue(enums::FLUID_BEER, "FLUID_BEER", true);
	initAddValue(enums::FLUID_BEER, "beer", false);
	initAddValue(enums::FLUID_SLIME, "FLUID_SLIME", true);
	initAddValue(enums::FLUID_SLIME, "slime", false);
	initAddValue(enums::FLUID_LEMONADE, "FLUID_LEMONADE", true);
	initAddValue(enums::FLUID_LEMONADE, "lemonade", false);
	initAddValue(enums::FLUID_MILK, "FLUID_MILK", true);
	initAddValue(enums::FLUID_MILK, "milk", false);
	initAddValue(enums::FLUID_MANA, "FLUID_MANA", true);
	initAddValue(enums::FLUID_MANA, "mana", false);
	initAddValue(enums::FLUID_LIFE, "FLUID_LIFE", true);
	initAddValue(enums::FLUID_LIFE, "life", false);
	initAddValue(enums::FLUID_OIL, "FLUID_OIL", true);
	initAddValue(enums::FLUID_OIL, "oil", false);
	initAddValue(enums::FLUID_URINE, "FLUID_URINE", true);
	initAddValue(enums::FLUID_URINE, "urine", false);
	initAddValue(enums::FLUID_COCONUTMILK, "FLUID_COCONUTMILK", true);
	initAddValue(enums::FLUID_COCONUTMILK, "coconut", false);
	initAddValue(enums::FLUID_COCONUTMILK, "coconutmilk", false);
	initAddValue(enums::FLUID_WINE, "FLUID_WINE", true);
	initAddValue(enums::FLUID_WINE, "wine", false);
	initAddValue(enums::FLUID_MUD, "FLUID_MUD", true);
	initAddValue(enums::FLUID_MUD, "mud", false);
	initAddValue(enums::FLUID_FRUITJUICE, "FLUID_FRUITJUICE", true);
	initAddValue(enums::FLUID_FRUITJUICE, "fruitjuice", false);
	initAddValue(enums::FLUID_LAVA, "FLUID_LAVA", true);
	initAddValue(enums::FLUID_LAVA, "lava", false);
	initAddValue(enums::FLUID_RUM, "FLUID_RUM", true);
	initAddValue(enums::FLUID_RUM, "rum", false);
	initAddValue(enums::FLUID_SWAMP, "FLUID_SWAMP", true);
	initAddValue(enums::FLUID_SWAMP, "swamp", false);
}

template<> bool ClientFluidType__Base::initialized = false;
template<> std::string ClientFluidType__Base::enum_name = "ClientFluidType";
template<> ClientFluidType__Base::EnumToString ClientFluidType__Base::enum_to_string = ClientFluidType__Base::EnumToString();
template<> ClientFluidType__Base::StringToEnum ClientFluidType__Base::string_to_enum = ClientFluidType__Base::StringToEnum();
template<> ClientFluidType__Base::StringToEnum ClientFluidType__Base::lstring_to_enum= ClientFluidType__Base::StringToEnum();
template<> void ClientFluidType__Base::initialize()
{
	initAddValue(enums::CLIENTFLUID_EMPTY, "CLIENTFLUID_EMPTY", true);
	initAddValue(enums::CLIENTFLUID_BLUE, "CLIENTFLUID_BLUE", true);
	initAddValue(enums::CLIENTFLUID_PURPLE, "CLIENTFLUID_PURPLE", true);
	initAddValue(enums::CLIENTFLUID_BROWN_1, "CLIENTFLUID_BROWN_1", true);
	initAddValue(enums::CLIENTFLUID_BROWN_2, "CLIENTFLUID_BROWN_2", true);
	initAddValue(enums::CLIENTFLUID_RED, "CLIENTFLUID_RED", true);
	initAddValue(enums::CLIENTFLUID_GREEN, "CLIENTFLUID_GREEN", true);
	initAddValue(enums::CLIENTFLUID_BROWN, "CLIENTFLUID_BROWN", true);
	initAddValue(enums::CLIENTFLUID_YELLOW, "CLIENTFLUID_YELLOW", true);
	initAddValue(enums::CLIENTFLUID_WHITE, "CLIENTFLUID_WHITE", true);
}

template<> bool SquareColor__Base::initialized = false;
template<> std::string SquareColor__Base::enum_name = "SquareColor";
template<> SquareColor__Base::EnumToString SquareColor__Base::enum_to_string = SquareColor__Base::EnumToString();
template<> SquareColor__Base::StringToEnum SquareColor__Base::string_to_enum = SquareColor__Base::StringToEnum();
template<> SquareColor__Base::StringToEnum SquareColor__Base::lstring_to_enum= SquareColor__Base::StringToEnum();
template<> void SquareColor__Base::initialize()
{
	initAddValue(enums::SQ_COLOR_NONE, "SQ_COLOR_NONE", true);
	initAddValue(enums::SQ_COLOR_BLACK, "SQ_COLOR_BLACK", true);
}

template<> bool TextColor__Base::initialized = false;
template<> std::string TextColor__Base::enum_name = "TextColor";
template<> TextColor__Base::EnumToString TextColor__Base::enum_to_string = TextColor__Base::EnumToString();
template<> TextColor__Base::StringToEnum TextColor__Base::string_to_enum = TextColor__Base::StringToEnum();
template<> TextColor__Base::StringToEnum TextColor__Base::lstring_to_enum= TextColor__Base::StringToEnum();
template<> void TextColor__Base::initialize()
{
	initAddValue(enums::TEXTCOLOR_BLUE, "TEXTCOLOR_BLUE", true);
	initAddValue(enums::TEXTCOLOR_LIGHTBLUE, "TEXTCOLOR_LIGHTBLUE", true);
	initAddValue(enums::TEXTCOLOR_LIGHTGREEN, "TEXTCOLOR_LIGHTGREEN", true);
	initAddValue(enums::TEXTCOLOR_PURPLE, "TEXTCOLOR_PURPLE", true);
	initAddValue(enums::TEXTCOLOR_LIGHTGREY, "TEXTCOLOR_LIGHTGREY", true);
	initAddValue(enums::TEXTCOLOR_DARKRED, "TEXTCOLOR_DARKRED", true);
	initAddValue(enums::TEXTCOLOR_RED, "TEXTCOLOR_RED", true);
	initAddValue(enums::TEXTCOLOR_ORANGE, "TEXTCOLOR_ORANGE", true);
	initAddValue(enums::TEXTCOLOR_YELLOW, "TEXTCOLOR_YELLOW", true);
	initAddValue(enums::TEXTCOLOR_WHITE_EXP, "TEXTCOLOR_WHITE_EXP", true);
	initAddValue(enums::TEXTCOLOR_NONE, "TEXTCOLOR_NONE", true);
	initAddValue(enums::TEXTCOLOR_UNK, "TEXTCOLOR_UNK", true);
}

template<> bool IconType__Base::initialized = false;
template<> std::string IconType__Base::enum_name = "IconType";
template<> IconType__Base::EnumToString IconType__Base::enum_to_string = IconType__Base::EnumToString();
template<> IconType__Base::StringToEnum IconType__Base::string_to_enum = IconType__Base::StringToEnum();
template<> IconType__Base::StringToEnum IconType__Base::lstring_to_enum= IconType__Base::StringToEnum();
template<> void IconType__Base::initialize()
{
	initAddValue(enums::ICON_NONE, "ICON_NONE", true);
	initAddValue(enums::ICON_POISON, "ICON_POISON", true);
	initAddValue(enums::ICON_BURN, "ICON_BURN", true);
	initAddValue(enums::ICON_ENERGY, "ICON_ENERGY", true);
	initAddValue(enums::ICON_DRUNK, "ICON_DRUNK", true);
	initAddValue(enums::ICON_MANASHIELD, "ICON_MANASHIELD", true);
	initAddValue(enums::ICON_PARALYZE, "ICON_PARALYZE", true);
	initAddValue(enums::ICON_HASTE, "ICON_HASTE", true);
	initAddValue(enums::ICON_SWORDS, "ICON_SWORDS", true);
	initAddValue(enums::ICON_DROWNING, "ICON_DROWNING", true);
	initAddValue(enums::ICON_FREEZING, "ICON_FREEZING", true);
	initAddValue(enums::ICON_DAZZLED, "ICON_DAZZLED", true);
	initAddValue(enums::ICON_CURSED, "ICON_CURSED", true);
	initAddValue(enums::ICON_PARTY_BUFF, "ICON_PARTY_BUFF", true);
	initAddValue(enums::ICON_PZBLOCK, "ICON_PZBLOCK", true);
	initAddValue(enums::ICON_PZ, "ICON_PZ", true);
}

template<> bool WeaponType__Base::initialized = false;
template<> std::string WeaponType__Base::enum_name = "WeaponType";
template<> WeaponType__Base::EnumToString WeaponType__Base::enum_to_string = WeaponType__Base::EnumToString();
template<> WeaponType__Base::StringToEnum WeaponType__Base::string_to_enum = WeaponType__Base::StringToEnum();
template<> WeaponType__Base::StringToEnum WeaponType__Base::lstring_to_enum= WeaponType__Base::StringToEnum();
template<> void WeaponType__Base::initialize()
{
	initAddValue(enums::WEAPON_NONE, "WEAPON_NONE", true);
	initAddValue(enums::WEAPON_SWORD, "WEAPON_SWORD", true);
	initAddValue(enums::WEAPON_CLUB, "WEAPON_CLUB", true);
	initAddValue(enums::WEAPON_AXE, "WEAPON_AXE", true);
	initAddValue(enums::WEAPON_SHIELD, "WEAPON_SHIELD", true);
	initAddValue(enums::WEAPON_DIST, "WEAPON_DIST", true);
	initAddValue(enums::WEAPON_WAND, "WEAPON_WAND", true);
	initAddValue(enums::WEAPON_AMMO, "WEAPON_AMMO", true);
}

template<> bool AmmunitionType__Base::initialized = false;
template<> std::string AmmunitionType__Base::enum_name = "AmmunitionType";
template<> AmmunitionType__Base::EnumToString AmmunitionType__Base::enum_to_string = AmmunitionType__Base::EnumToString();
template<> AmmunitionType__Base::StringToEnum AmmunitionType__Base::string_to_enum = AmmunitionType__Base::StringToEnum();
template<> AmmunitionType__Base::StringToEnum AmmunitionType__Base::lstring_to_enum= AmmunitionType__Base::StringToEnum();
template<> void AmmunitionType__Base::initialize()
{
	initAddValue(enums::AMMO_NONE, "AMMO_NONE", true);
	initAddValue(enums::AMMO_NONE, "none", false);
	initAddValue(enums::AMMO_BOLT, "AMMO_BOLT", true);
	initAddValue(enums::AMMO_BOLT, "bolt", false);
	initAddValue(enums::AMMO_BOLT, "piercingbolt", false);
	initAddValue(enums::AMMO_BOLT, "powerbolt", false);
	initAddValue(enums::AMMO_BOLT, "infernalbolt", false);
	initAddValue(enums::AMMO_ARROW, "AMMO_ARROW", true);
	initAddValue(enums::AMMO_ARROW, "arrow", false);
	initAddValue(enums::AMMO_ARROW, "poisonarrow", false);
	initAddValue(enums::AMMO_ARROW, "burstarrow", false);
	initAddValue(enums::AMMO_ARROW, "sniperarrow", false);
	initAddValue(enums::AMMO_ARROW, "onyxarrow", false);
	initAddValue(enums::AMMO_ARROW, "flasharrow", false);
	initAddValue(enums::AMMO_ARROW, "flamingarrow", false);
	initAddValue(enums::AMMO_ARROW, "shiverarrow", false);
	initAddValue(enums::AMMO_ARROW, "eartharrow", false);
	initAddValue(enums::AMMO_SPEAR, "AMMO_SPEAR", true);
	initAddValue(enums::AMMO_SPEAR, "spear", false);
	initAddValue(enums::AMMO_SPEAR, "huntingspear", false);
	initAddValue(enums::AMMO_SPEAR, "enchantedspear", false);
	initAddValue(enums::AMMO_SPEAR, "etherealspear", false);
	initAddValue(enums::AMMO_SPEAR, "royalspear", false);
	initAddValue(enums::AMMO_THROWINGSTAR, "AMMO_THROWINGSTAR", true);
	initAddValue(enums::AMMO_THROWINGSTAR, "throwingstar", false);
	initAddValue(enums::AMMO_THROWINGKNIFE, "AMMO_THROWINGKNIFE", true);
	initAddValue(enums::AMMO_THROWINGKNIFE, "throwingknife", false);
	initAddValue(enums::AMMO_STONE, "AMMO_STONE", true);
	initAddValue(enums::AMMO_STONE, "smallstone", false);
	initAddValue(enums::AMMO_STONE, "largerock", false);
	initAddValue(enums::AMMO_SNOWBALL, "AMMO_SNOWBALL", true);
	initAddValue(enums::AMMO_SNOWBALL, "snowball", false);
}

template<> bool AmmunitionAction__Base::initialized = false;
template<> std::string AmmunitionAction__Base::enum_name = "AmmunitionAction";
template<> AmmunitionAction__Base::EnumToString AmmunitionAction__Base::enum_to_string = AmmunitionAction__Base::EnumToString();
template<> AmmunitionAction__Base::StringToEnum AmmunitionAction__Base::string_to_enum = AmmunitionAction__Base::StringToEnum();
template<> AmmunitionAction__Base::StringToEnum AmmunitionAction__Base::lstring_to_enum= AmmunitionAction__Base::StringToEnum();
template<> void AmmunitionAction__Base::initialize()
{
	initAddValue(enums::AMMOACTION_NONE, "AMMOACTION_NONE", true);
	initAddValue(enums::AMMOACTION_NONE, "none", false);
	initAddValue(enums::AMMOACTION_REMOVECOUNT, "AMMOACTION_REMOVECOUNT", true);
	initAddValue(enums::AMMOACTION_REMOVECOUNT, "removecount", false);
	initAddValue(enums::AMMOACTION_REMOVECHARGE, "AMMOACTION_REMOVECHARGE", true);
	initAddValue(enums::AMMOACTION_REMOVECHARGE, "removecharge", false);
	initAddValue(enums::AMMOACTION_MOVE, "AMMOACTION_MOVE", true);
	initAddValue(enums::AMMOACTION_MOVE, "move", false);
	initAddValue(enums::AMMOACTION_MOVEBACK, "AMMOACTION_MOVEBACK", true);
	initAddValue(enums::AMMOACTION_MOVEBACK, "moveback", false);
}

template<> bool WieldInformation__Base::initialized = false;
template<> std::string WieldInformation__Base::enum_name = "WieldInformation";
template<> WieldInformation__Base::EnumToString WieldInformation__Base::enum_to_string = WieldInformation__Base::EnumToString();
template<> WieldInformation__Base::StringToEnum WieldInformation__Base::string_to_enum = WieldInformation__Base::StringToEnum();
template<> WieldInformation__Base::StringToEnum WieldInformation__Base::lstring_to_enum= WieldInformation__Base::StringToEnum();
template<> void WieldInformation__Base::initialize()
{
	initAddValue(enums::WIELDINFO_NONE, "WIELDINFO_NONE", true);
	initAddValue(enums::WIELDINFO_LEVEL, "WIELDINFO_LEVEL", true);
	initAddValue(enums::WIELDINFO_MAGLV, "WIELDINFO_MAGLV", true);
	initAddValue(enums::WIELDINFO_VOCREQ, "WIELDINFO_VOCREQ", true);
	initAddValue(enums::WIELDINFO_PREMIUM , "WIELDINFO_PREMIUM ", true);
}

template<> bool SkullType__Base::initialized = false;
template<> std::string SkullType__Base::enum_name = "SkullType";
template<> SkullType__Base::EnumToString SkullType__Base::enum_to_string = SkullType__Base::EnumToString();
template<> SkullType__Base::StringToEnum SkullType__Base::string_to_enum = SkullType__Base::StringToEnum();
template<> SkullType__Base::StringToEnum SkullType__Base::lstring_to_enum= SkullType__Base::StringToEnum();
template<> void SkullType__Base::initialize()
{
	initAddValue(enums::SKULL_NONE, "SKULL_NONE", true);
	initAddValue(enums::SKULL_YELLOW, "SKULL_YELLOW", true);
	initAddValue(enums::SKULL_GREEN, "SKULL_GREEN", true);
	initAddValue(enums::SKULL_WHITE, "SKULL_WHITE", true);
	initAddValue(enums::SKULL_RED, "SKULL_RED", true);
	initAddValue(enums::SKULL_BLACK, "SKULL_BLACK", true);
}

template<> bool PartyShieldType__Base::initialized = false;
template<> std::string PartyShieldType__Base::enum_name = "PartyShieldType";
template<> PartyShieldType__Base::EnumToString PartyShieldType__Base::enum_to_string = PartyShieldType__Base::EnumToString();
template<> PartyShieldType__Base::StringToEnum PartyShieldType__Base::string_to_enum = PartyShieldType__Base::StringToEnum();
template<> PartyShieldType__Base::StringToEnum PartyShieldType__Base::lstring_to_enum= PartyShieldType__Base::StringToEnum();
template<> void PartyShieldType__Base::initialize()
{
	initAddValue(enums::SHIELD_NONE, "SHIELD_NONE", true);
	initAddValue(enums::SHIELD_WHITEYELLOW, "SHIELD_WHITEYELLOW", true);
	initAddValue(enums::SHIELD_WHITEBLUE, "SHIELD_WHITEBLUE", true);
	initAddValue(enums::SHIELD_BLUE, "SHIELD_BLUE", true);
	initAddValue(enums::SHIELD_YELLOW, "SHIELD_YELLOW", true);
	initAddValue(enums::SHIELD_BLUE_SHAREDEXP, "SHIELD_BLUE_SHAREDEXP", true);
	initAddValue(enums::SHIELD_YELLOW_SHAREDEXP, "SHIELD_YELLOW_SHAREDEXP", true);
	initAddValue(enums::SHIELD_BLUE_NOSHAREDEXP_BLINK, "SHIELD_BLUE_NOSHAREDEXP_BLINK", true);
	initAddValue(enums::SHIELD_YELLOW_NOSHAREDEXP_BLINK, "SHIELD_YELLOW_NOSHAREDEXP_BLINK", true);
	initAddValue(enums::SHIELD_BLUE_NOSHAREDEXP, "SHIELD_BLUE_NOSHAREDEXP", true);
	initAddValue(enums::SHIELD_YELLOW_NOSHAREDEXP, "SHIELD_YELLOW_NOSHAREDEXP", true);
}

template<> bool PlayerFlag__Base::initialized = false;
template<> std::string PlayerFlag__Base::enum_name = "PlayerFlag";
template<> PlayerFlag__Base::EnumToString PlayerFlag__Base::enum_to_string = PlayerFlag__Base::EnumToString();
template<> PlayerFlag__Base::StringToEnum PlayerFlag__Base::string_to_enum = PlayerFlag__Base::StringToEnum();
template<> PlayerFlag__Base::StringToEnum PlayerFlag__Base::lstring_to_enum= PlayerFlag__Base::StringToEnum();
template<> void PlayerFlag__Base::initialize()
{
	initAddValue(enums::PlayerFlag_CannotUseCombat, "PlayerFlag_CannotUseCombat", true);
	initAddValue(enums::PlayerFlag_CannotAttackPlayer, "PlayerFlag_CannotAttackPlayer", true);
	initAddValue(enums::PlayerFlag_CannotAttackMonster, "PlayerFlag_CannotAttackMonster", true);
	initAddValue(enums::PlayerFlag_CannotBeAttacked, "PlayerFlag_CannotBeAttacked", true);
	initAddValue(enums::PlayerFlag_CanConvinceAll, "PlayerFlag_CanConvinceAll", true);
	initAddValue(enums::PlayerFlag_CanSummonAll, "PlayerFlag_CanSummonAll", true);
	initAddValue(enums::PlayerFlag_CanIllusionAll, "PlayerFlag_CanIllusionAll", true);
	initAddValue(enums::PlayerFlag_CanSenseInvisibility, "PlayerFlag_CanSenseInvisibility", true);
	initAddValue(enums::PlayerFlag_IgnoredByMonsters, "PlayerFlag_IgnoredByMonsters", true);
	initAddValue(enums::PlayerFlag_NotGainInFight, "PlayerFlag_NotGainInFight", true);
	initAddValue(enums::PlayerFlag_HasInfiniteMana, "PlayerFlag_HasInfiniteMana", true);
	initAddValue(enums::PlayerFlag_HasInfiniteSoul, "PlayerFlag_HasInfiniteSoul", true);
	initAddValue(enums::PlayerFlag_HasNoExhaustion, "PlayerFlag_HasNoExhaustion", true);
	initAddValue(enums::PlayerFlag_CannotUseSpells, "PlayerFlag_CannotUseSpells", true);
	initAddValue(enums::PlayerFlag_CannotPickupItem, "PlayerFlag_CannotPickupItem", true);
	initAddValue(enums::PlayerFlag_CanAlwaysLogin, "PlayerFlag_CanAlwaysLogin", true);
	initAddValue(enums::PlayerFlag_CanBroadcast, "PlayerFlag_CanBroadcast", true);
	initAddValue(enums::PlayerFlag_CanEditHouses, "PlayerFlag_CanEditHouses", true);
	initAddValue(enums::PlayerFlag_CannotBeBanned, "PlayerFlag_CannotBeBanned", true);
	initAddValue(enums::PlayerFlag_CannotBePushed, "PlayerFlag_CannotBePushed", true);
	initAddValue(enums::PlayerFlag_HasInfiniteCapacity, "PlayerFlag_HasInfiniteCapacity", true);
	initAddValue(enums::PlayerFlag_CanPushAllCreatures, "PlayerFlag_CanPushAllCreatures", true);
	initAddValue(enums::PlayerFlag_CanTalkRedPrivate, "PlayerFlag_CanTalkRedPrivate", true);
	initAddValue(enums::PlayerFlag_CanTalkRedChannel, "PlayerFlag_CanTalkRedChannel", true);
	initAddValue(enums::PlayerFlag_TalkOrangeHelpChannel, "PlayerFlag_TalkOrangeHelpChannel", true);
	initAddValue(enums::PlayerFlag_NotGainExperience, "PlayerFlag_NotGainExperience", true);
	initAddValue(enums::PlayerFlag_NotGainMana, "PlayerFlag_NotGainMana", true);
	initAddValue(enums::PlayerFlag_NotGainHealth, "PlayerFlag_NotGainHealth", true);
	initAddValue(enums::PlayerFlag_NotGainSkill, "PlayerFlag_NotGainSkill", true);
	initAddValue(enums::PlayerFlag_SetMaxSpeed, "PlayerFlag_SetMaxSpeed", true);
	initAddValue(enums::PlayerFlag_SpecialVIP, "PlayerFlag_SpecialVIP", true);
	initAddValue(enums::PlayerFlag_NotGenerateLoot, "PlayerFlag_NotGenerateLoot", true);
	initAddValue(enums::PlayerFlag_CanTalkRedChannelAnonymous, "PlayerFlag_CanTalkRedChannelAnonymous", true);
	initAddValue(enums::PlayerFlag_IgnoreProtectionZone, "PlayerFlag_IgnoreProtectionZone", true);
	initAddValue(enums::PlayerFlag_IgnoreSpellCheck, "PlayerFlag_IgnoreSpellCheck", true);
	initAddValue(enums::PlayerFlag_IgnoreWeaponCheck, "PlayerFlag_IgnoreWeaponCheck", true);
	initAddValue(enums::PlayerFlag_CannotBeMuted, "PlayerFlag_CannotBeMuted", true);
	initAddValue(enums::PlayerFlag_IsAlwaysPremium, "PlayerFlag_IsAlwaysPremium", true);
	initAddValue(enums::PlayerFlag_CanAnswerRuleViolations, "PlayerFlag_CanAnswerRuleViolations", true);
	initAddValue(enums::PlayerFlag_CanReloadContent, "PlayerFlag_CanReloadContent", true);
	initAddValue(enums::PlayerFlag_ShowGroupInsteadOfVocation, "PlayerFlag_ShowGroupInsteadOfVocation", true);
	initAddValue(enums::PlayerFlag_HasInfiniteStamina, "PlayerFlag_HasInfiniteStamina", true);
	initAddValue(enums::PlayerFlag_CannotMoveItems, "PlayerFlag_CannotMoveItems", true);
	initAddValue(enums::PlayerFlag_CannotMoveCreatures, "PlayerFlag_CannotMoveCreatures", true);
	initAddValue(enums::PlayerFlag_CanReportBugs, "PlayerFlag_CanReportBugs", true);
	initAddValue(enums::PlayerFlag_CanSeeSpecialDescription, "PlayerFlag_CanSeeSpecialDescription", true);
	initAddValue(enums::PlayerFlag_CannotBeSeen, "PlayerFlag_CannotBeSeen", true);
	initAddValue(enums::PlayerFlag_LastFlag, "PlayerFlag_LastFlag", true);
}

